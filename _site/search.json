[
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "üé§ Talks",
    "section": "",
    "text": "These are a list of talks I‚Äôve given:\n\nEvaluating and Productionizing LLMs, Vanishing Data Podcast, Nov 2023.\nInnovating on Software Development, Data Council, March 2023.\nAutoML, Literate Programming, and Data Tooling Cargo Cults, Vanishing Gradients Podcast with Hugo Bowne Anderson, July 2022.\nHow to evaluate ML Tooling: Guest Lecutre for Stanford CS 329S ML Systems Design, Feb 2022. Slides, Video\nJupyterCon 2020: ‚Äúfastpages - A new, open source Jupyter notebook blogging system.‚Äù. Slides, Video.\nGradient Descent by Weights & Biases: A discussion on Automated Machine Learning, CodeSearchNet, GitHub Actions and MLOps: Video\nGitHub Universe 2019: ‚ÄúMachine Learning Ops With GitHub Actions & Kubernetes‚Äù. Video\nTensorFlow World, 2019: ‚ÄúAutomating your developer workflow on GitHub with Tensorflow‚Äù. Slides, Link\nData Skeptic Interview, Jan 2018: ‚ÄúSemantic Search at Github‚Äù.\nKubeCon 2018, ‚ÄúNatural Language Code Search With Kubeflow‚Äù. Slides, Video\nKDD, London August 2018: Hands on tutorial, ‚ÄúFeature Extraction and Summarization With Sequence to Sequence Learning‚Äù. Tutorial-site\nMl4all, Portland May 2018: ‚ÄúHow to Create Magical Data Products Using Sequence-to-Sequence Models‚Äù. Slides, Video\nODSC, San Francisco Nov 2017: ‚ÄúAdvice For New And Junior Data Scientists‚Äù Video"
  },
  {
    "objectID": "oss/opensource.html",
    "href": "oss/opensource.html",
    "title": " Open Source",
    "section": "",
    "text": "My open source work has been focused on developer tools and infrastructure. I‚Äôve contributed to projects such as fastai, Metaflow, Kubeflow, Jupyter, and Great Expectations, as well as many others. I list some of these below:"
  },
  {
    "objectID": "oss/opensource.html#fastai",
    "href": "oss/opensource.html#fastai",
    "title": " Open Source",
    "section": " fastai",
    "text": "fastai\nI maintain and contribute to a variety of fastai projects. Below are the projects I‚Äôve been very involved in:\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nRole\n\n\nOther References\n\n\n\n\n\n\nfastpages \n\n\nAn easy to use blogging platform for Jupyter Notebooks. \n\n\nCreator\n\n\nBlog, Talk\n\n\n\n\nnbdev \n\n\nWrite, test, document, and distribute software packages and technical articles all in one place, your notebook. \n\n\nCore Contributor\n\n\nBlog, Talk\n\n\n\n\nfastcore \n\n\nA Python language extension for exploratory and literate programming. \n\n\nCore Contributor\n\n\nBlog\n\n\n\n\nghapi \n\n\nA Python client for the GitHub API \n\n\nCore Contributor\n\n\n Blog\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "oss/opensource.html#metaflow",
    "href": "oss/opensource.html#metaflow",
    "title": " Open Source",
    "section": " Metaflow",
    "text": "Metaflow\nI created notebook cards: A tool that allows you to use notebooks to generate reports, visualizations and diagnostics in Metaflow production workflows. Blog"
  },
  {
    "objectID": "oss/opensource.html#kubeflow",
    "href": "oss/opensource.html#kubeflow",
    "title": " Open Source",
    "section": " Kubeflow",
    "text": "Kubeflow\nI‚Äôve worked on several projects related to Kubeflow, mainly around examples and documentation:\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nRole\n\n\nOther References\n\n\n\n\n\n\nGitHub Issue Summarization\n\n\nAn end-to-end example of using Kubeflow to summarize GitHub Issues. Became one of the most popular tutorials of Kubeflow. \n\n\nAuthor\n\n\nInterview with Jeremy Lewi\n\n\n\n\nkubeflow/codei-intelligence\n\n\nVarious tutorials and applied examples of Kubeflow. \n\n\nCore Contributor\n\n\nTalk\n\n\n\n\nThe Kubeflow Blog\n\n\nI used fastpages to create the official Kubeflow blog. \n\n\nCore Contributor\n\n\nSite\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "oss/opensource.html#jupyter",
    "href": "oss/opensource.html#jupyter",
    "title": " Open Source",
    "section": " Jupyter",
    "text": "Jupyter\nI created the Repo2Docker GitHub Action, which allows you to trigger repo2docker to build a Jupyter enabled Docker images from your GitHub repository. This Action allows you to pre-cache images for your own BinderHub cluster or for mybinder.org.\nThis project was accepted into the official JupyterHub GitHub org."
  },
  {
    "objectID": "oss/opensource.html#great-expectations",
    "href": "oss/opensource.html#great-expectations",
    "title": " Open Source",
    "section": " Great Expectations",
    "text": "Great Expectations\nI developed the Great Expectations GitHub Action that allows you to use Great Expectations in CI/CD Workflows. Blog."
  },
  {
    "objectID": "oss/opensource.html#other",
    "href": "oss/opensource.html#other",
    "title": " Open Source",
    "section": " Other",
    "text": "Other\nI worked as a staff machine learning engineer at GitHub from 2017 - 2022. I led or created the following open source projects that explored the intersection of machine learning, data and the developer workflow:\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nRole\n\n\nOther References\n\n\n\n\n\n\nCode Search Net \n\n\nDatasets, tools, and benchmarks for representation learning of code. This was a big part of the inspiration for GitHub‚Äôs eventual work on CoPilot. \n\n\nLead\n\n\n Blog, Paper\n\n\n\n\nMachine Learning Ops\n\n\nA collection of resources on how to facilitate Machine Learning Ops with GitHub. This project explored integrations with a wide variety of data science tools with GitHub Actions. \n\n\nCreator\n\n\nBlog\n\n\n\n\nIssue Label Bot\n\n\nA GitHub App powered by machine learning that auto-labels issues. \n\n\nCreator\n\n\nBlog, Talk\n\n\n\n\nCovid19-dashboard \n\n\nA demonstration of how to use GitHub Actions, Jupyter Notebooks and fastpages to create interactive dashboards that update daily.\n\n\n\nCreator\n\n\nNews Article\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/nbdev/index.html",
    "href": "blog/posts/nbdev/index.html",
    "title": "On commercializing nbdev",
    "section": "",
    "text": "nbdev is a software development tool based on Jupyter that feels like its from the future.\nA few friends have asked me why I decided not to commercialize nbdev, especially after putting lots of work into the project, including leaving my full-time job to work on it. So I thought I would write a short post to explain my reasoning."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#background",
    "href": "blog/posts/nbdev/index.html#background",
    "title": "On commercializing nbdev",
    "section": "Background",
    "text": "Background\nnbdev is an innovative software development framework for Python that embraces literate and exploratory programming. I worked on nbdev from 2020-2023 with Jeremy Howard and, later, Wasim Lorgat. I had the privilege and excitement of exploring the boundaries of developer tools and exploratory programming while working with very talented software engineers. In addition to creating a tool many people enjoyed, I enjoyed using nbdev for personal and professional projects."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#opportunities",
    "href": "blog/posts/nbdev/index.html#opportunities",
    "title": "On commercializing nbdev",
    "section": "Opportunities",
    "text": "Opportunities\nWhile conducting product research, I interviewed many developers from different backgrounds to understand their pain points and needs. All developers I talked to struggled with one key challenge: it was difficult, if not impossible, to convince other engineers to use nbdev.\nThe following are the biggest reasons that prevented adoption:\n\nFriction in onboarding engineers. In many companies, there are often existing Python projects, and it can be detrimental to maintain different ways of doing things when a company has already settled upon one way that it has built processes and tools around.\nCollisions with the rest of the software development stack: it was (and still is) a pain to version control notebooks in a way that‚Äôs conducive to collaboration. For practical purposes, you cannot perform code reviews of notebooks on GitHub without purchasing a tool called ReviewNB. So instead of convincing people to use nbdev, you have to convince them to use nbdev and ReviewNB. This makes the barrier to initial adoption considerably high - as procuring software in many organizations is a non-trivial process involving security review, compliance, legal and other stakeholders.\n\nI viewed solving the above problems as potential opportunities for commercializing nbdev."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#shifting-focus",
    "href": "blog/posts/nbdev/index.html#shifting-focus",
    "title": "On commercializing nbdev",
    "section": "Shifting Focus",
    "text": "Shifting Focus\nJeremy, Wasim, and I eventually settled on the idea of ‚ÄúWordPress for developers,‚Äù a hosted site allowing people to create and share nbdev projects. We thought this would be an excellent way to get people to try nbdev without installing anything. The idea was to narrow the audience to people interested in hosting projects on a platform that promoted exploration and sharing, similar to Glitch that was as easy to use and pragmatic as Wordpress.\nAround the same time we began discussing hosted tools, the machine learning world experienced a tectonic shift due to the explosion of Generative AI, namely Stable Diffusion. fast.ai, the organization that created nbdev, was also changing its focus. fast.ai‚Äôs prime directive was to make deep learning accessible to as many people as possible, and generative AI was too important to ignore. Accordingly, Jeremy placed his full attention on a Stable Diffusion course.\nThis pivot caused some turbulence as we navigated the different priorities of nbdev, generative AI research, and making money. We eventually settled on offering consulting services for everything related to fast.ai in the form of fast.ai partners, which would allow us to bootstrap ourselves financially and embrace the larger mission of fast.ai (including generative AI and research). Eventually, I found the splintered focus across so many areas to be unproductive1 and decided to step away from everything except consulting to regain my footing.\nSoon after that, ChatGPT emerged onto the scene and caused further shifts in machine learning that were orders of magnitude larger than their text-to-image predecessors. Pretty soon, all of my clients were interested in language models, and I found myself working exclusively on operationalizing them (a skill that I have cultivated by working in machine learning for 20+ years). Additionally, LLMs profoundly changed the nature of software development, especially the kind of software development that nbdev was designed to support2. These factors and those discussed earlier suggested it was a good time to step away from nbdev and focus on other things."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#what-i-learned",
    "href": "blog/posts/nbdev/index.html#what-i-learned",
    "title": "On commercializing nbdev",
    "section": "What I learned",
    "text": "What I learned\nI learned some important lessons during this process:\n\nJust because you love a project and find it useful, that doesn‚Äôt necessarily imply that it‚Äôs ripe for commercialization. I always struggled to gain conviction that there was a good business model for nbdev.3 Instead, I pursued this path because I was drawn to the idea of starting a business with people I really liked. Ultimately, I learned that at least one person needs strong conviction in addition to being excited about the people you are working with - not just one or the other.4 I also learned that it‚Äôs important to be honest with yourself about your (and your team‚Äôs) level of conviction and not try to force something that isn‚Äôt there.\nListen to your instincts. I ignored my instincts on multiple occasions throughout this journey. As I‚Äôve grown older, I‚Äôve learned to make this mistake much less often, but I could have done better here.\nDon‚Äôt be afraid to pivot. I think we avoided unnecessary churn by steering clear of a situation that wasn‚Äôt promising. I‚Äôm much more excited about the work I‚Äôm doing now.5\nOwn your own brand. My professional brand became increasingly tied to fast.ai and my friend Jeremy Howard. I‚Äôm grateful for the growth I‚Äôve experienced under this mentorship ‚Äì but I believe it is important to build your own distinct brand and identity. I discovered it can be challenging to build your own brand when you are working on someone else‚Äôs project6, and is something I struggled with. I‚Äôm looking forward to working on this more."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#future-directions",
    "href": "blog/posts/nbdev/index.html#future-directions",
    "title": "On commercializing nbdev",
    "section": "Future Directions",
    "text": "Future Directions\nI suspect that I‚Äôm not completely finished with nbdev. I may revisit the project or related ideas when the time is right. I‚Äôm excited by the work Posit is doing in the areas of literate and exploratory programming, which include many of the ideas explored in nbdev. Wasim has even joined the team at Posit, so I‚Äôm excited to see what they come up with.7\nRegarding what I‚Äôm working on next ‚Äì I‚Äôll have to save my thoughts on that for another post üòä."
  },
  {
    "objectID": "blog/posts/nbdev/index.html#footnotes",
    "href": "blog/posts/nbdev/index.html#footnotes",
    "title": "On commercializing nbdev",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI burned out several times during this process, but I didn‚Äôt realize why at the time. Not surprisingly, trying to focus on too many things at once was the root cause.‚Ü©Ô∏é\nSee this demo for ideas on how coding with LLMs might look like, especially with notebooks.‚Ü©Ô∏é\nThe problem with the hosted solution is that this is not something I would want to use. I can‚Äôt picture myself trying to host code on something other than GitHub/GitLab.‚Ü©Ô∏é\nWithout shared conviction, there is no glue holding everyone together and people can drift apart.‚Ü©Ô∏é\nI‚Äôll share more about this in a future post.‚Ü©Ô∏é\nI don‚Äôt believe this is always the case, but it can be true depending on the dynamics of the group.‚Ü©Ô∏é\nWe previously partnered with Posit and JJ Allaire and built nbdev on top of Quarto. I‚Äôm currently advising Posit on their product and strategy. They have additional projects on their roadmap that I cannot disclose now.‚Ü©Ô∏é"
  },
  {
    "objectID": "blog/posts/k8s/index.html",
    "href": "blog/posts/k8s/index.html",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "",
    "text": "K8s For Data Scientists Course\n\n\n\nIf you came here looking for the course, feel free to jump ahead to: K8s For Data Scientists.\nKubernetes, known as K8s, is an open-source system for deploying and managing containerized applications in the cloud. An increasing amount of modern web applications are deployed on K8s. If you are an ML engineer, it is increasingly likely that either the infrastructure you use to train, monitor, or orchestrate your models is deployed on K8s, or downstream applications that consume your models are running on K8s. However, K8s is a complex system that can be intimidating to learn.\nI agree with Chip Huyen that, in theory, Data Scientists shouldn‚Äôt need to learn K8s. However, the truth is: Even though you shouldn‚Äôt have to, it‚Äôs really beneficial if you do! I‚Äôve found that I‚Äôm often constrained by infrastructure and that infrastructure is increasingly hosted on Kubernetes.\nFor example, I‚Äôm rarely given access to a cloud provider‚Äôs console, and instead, I have access to a K8s cluster with some data tools already installed. When something goes awry, it‚Äôs beneficial to know enough about K8s to debug the issue. Additionally, familiarity with basic concepts allows me to have more productive conversations with my team about infrastructure.\nVicki Boykis seems to agree that the investment in learning this technology is worthwhile1:\nBelow, I outline several reasons why learning K8s is a good idea for machine learning engineers2."
  },
  {
    "objectID": "blog/posts/k8s/index.html#hosted-dataml-tools-are-not-always-an-option",
    "href": "blog/posts/k8s/index.html#hosted-dataml-tools-are-not-always-an-option",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "Hosted data/ML tools are not always an option",
    "text": "Hosted data/ML tools are not always an option\n\n\n\nA robot concierge helping a scientist\n\n\nLarge cloud providers offer their flavors of ML infrastructure as hosted solutions3. However, there is often a gap between these offerings and the needs of machine learning teams. For example, I‚Äôve seen the following tools deployed alongside or in place of hosted solutions:\n\nMetaflow\nKubeflow\nArgo\nJupyterHub\nDask\netc.\n\nWhen open source isn‚Äôt enough, third-party vendors are happy to install their software on your cloud. However, you often need basic infrastructure skills to enable this. These skills often intersect with Kubernetes. While you may not be responsible for deploying the infrastructure yourself, it is helpful to understand the basics of how things work so that you can do basic debugging and troubleshooting. For example, knowing where to find logs or an API/HTTPS endpoint can unblock you in many cases."
  },
  {
    "objectID": "blog/posts/k8s/index.html#nobody-is-coming-to-save-you",
    "href": "blog/posts/k8s/index.html#nobody-is-coming-to-save-you",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "Nobody is coming to save you",
    "text": "Nobody is coming to save you\n\n\n\nA super hero\n\n\nA typical first experience as a machine learning professional is that you don‚Äôt have the necessary tools to get started. This is incredibly frustrating, as making progress without the proper tools can be hard. This experience usually culminates in a conversation like this:\n\nML Eng: I‚Äôm excited to join ACME company! You‚Äôve hired me to optimize marketing spending with predictive models. The issue is that we don‚Äôt have the basic infrastructure or tools necessary for me to work efficiently.\nManager: I‚Äôm confused. Can‚Äôt you install the tools you need? Isn‚Äôt that what you are for? I was expecting that you would figure it out.\nML Eng: No, I don‚Äôt know how to set up and deploy infrastructure. We need a special infrastructure or DevOps person for that.\nManager: It will be hard to ask for more resources if we don‚Äôt know the expected return on investment. Can you do the ML project first, demonstrate some value, and then we can invest in infrastructure?\nML Eng: I need some minimum tools to experiment more quickly and develop a proof of concept. Also, I need tools that might help me collaborate better with my team‚Ä¶\n\nMy experience is that DevOps teams are chronically understaffed and overworked. While it usually isn‚Äôt advisable to deploy enterprise software yourself on Kubernetes for security concerns, having basic skills can lift a tremendous burden off your DevOps counterparts and make it tractable for them to help you.\nK8s are not a panacea for all infrastructure problems. You must operate within the constraints of your organization and existing software stack.4 However, with its growing popularity, it is increasingly likely that learning this technology will help you."
  },
  {
    "objectID": "blog/posts/k8s/index.html#ml-research-is-crowded.-compete-on-swe-skills.",
    "href": "blog/posts/k8s/index.html#ml-research-is-crowded.-compete-on-swe-skills.",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "ML research is crowded. Compete on SWE skills.",
    "text": "ML research is crowded. Compete on SWE skills.\n\n\n\nAn overcrowded room of scientists\n\n\nOne of the best ways to set yourself apart as a data scientist is through your skills. Traditional education often emphasizes learning the latest ML techniques. However, cutting-edge ML research is very competitive. It‚Äôs also an extremely crowded space.\nIn my experience, the bottleneck many teams face is not a lack of knowledge of cutting-edge ML techniques but software engineering skills and partners to help operationalize models. If you take some time to learn how to stand up tools and infrastructure, you will be invaluable to your team.\nMore importantly, deploying and integrating models into services and applications is critical to connecting ML to business problems. Learning K8s will help you do this."
  },
  {
    "objectID": "blog/posts/k8s/index.html#your-company-likely-already-runs-k8s",
    "href": "blog/posts/k8s/index.html#your-company-likely-already-runs-k8s",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "Your company likely already runs K8s",
    "text": "Your company likely already runs K8s\n\n\n\nA scientist shaking hands with someone who runs infrastructure\n\n\nJust as Python is the lingua franca of data science, K8s is becoming the lingua franca of cloud infrastructure. According to a 2021 Survey by CNCF, 96% of organizations are either using or evaluating Kubernetes. Furthermore, Stack Overflow‚Äôs 2022 Developer Survey shows that Docker and Kubernetes are the number one and two most loved and wanted tools, respectively. This is a strong indicator that K8s are here to stay.\nBasic proficiency with K8s will drastically increase your chances of garnering support for your desired tools in many organizations. Proficiency with K8s increases the likelihood that:\n\nYour DevOps counterparts will feel comfortable with the tools you want to deploy\nYou will have a shared language in which to talk to your application administrators\nYou will be more likely to attract people to help you with infra 5\n\nThese factors make it much more likely that you will get the tools that meet you where you are as opposed to something a software engineer without any data science experience thinks is a good idea (which I‚Äôve seen happen a lot!)."
  },
  {
    "objectID": "blog/posts/k8s/index.html#but-isnt-it-overkill",
    "href": "blog/posts/k8s/index.html#but-isnt-it-overkill",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "But isn‚Äôt it overkill?",
    "text": "But isn‚Äôt it overkill?\n\n\n\nCutting oranges with a chainsaw\n\n\nFor simple apps that you want to stand up quickly or prototype, K8s is overkill. Instead, I‚Äôm advocating knowledge of K8s as useful when working within the environments found in many companies. For example, hosting your data product on a single VM is often insufficient if you want to deploy production software. Many companies even have infrastructure that may block you from doing this with paved paths that only include Kubernetes.\nEven if you are not deploying any production software, K8s can be invaluable in allowing you to deploy the tools you need. In many cases using K8s can make tasks easier. Enterprises have necessarily invested resources in creating guardrails to control costs and security. Those guardrails are increasingly built around K8s patterns6. Understanding these concepts can make operating within the confines of your company‚Äôs cloud stack easier."
  },
  {
    "objectID": "blog/posts/k8s/index.html#you-dont-need-to-be-an-expert",
    "href": "blog/posts/k8s/index.html#you-dont-need-to-be-an-expert",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "You don‚Äôt need to be an expert",
    "text": "You don‚Äôt need to be an expert\n\n\n\nA student sitting at a desk in a library\n\n\nK8s are complicated, but you don‚Äôt need to become an expert to unlock great value as a Data Scientist. I‚Äôm not suggesting that data scientists become K8s administrators. K8s Administration is a very involved task and worthy of its own role. Unfortunately, nearly all educational material around K8s is focused on being an administrator, which is overkill for what most data scientists need."
  },
  {
    "objectID": "blog/posts/k8s/index.html#a-course",
    "href": "blog/posts/k8s/index.html#a-course",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "A course?",
    "text": "A course?\nI haven‚Äôt yet found a good resource for people like data scientists to learn Kubernetes without wading through lots of irrelevant material geared towards administrators. So my colleagues and I are considering creating a free course with data scientists in mind. If this sounds interesting, you can sign up here."
  },
  {
    "objectID": "blog/posts/k8s/index.html#footnotes",
    "href": "blog/posts/k8s/index.html#footnotes",
    "title": "Why Should ML Engineers Learn Kubernetes?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nVicki is not someone who is impressed by flashy or new technologies and is someone who takes a pragmatic approach to get the job done. When she says you should learn K8s, you should pay attention!‚Ü©Ô∏é\nEach subsection of this article has a picture that has been generated by Stable diffusion with a prompt that very similar to the image caption.‚Ü©Ô∏é\nThese systems are AWS - Sagemaker, Azure - AzureML and GCP - VertexAI.‚Ü©Ô∏é\nSome organizations have built solutions that avoid K8s. For example, BigHat uses a solution based on AWS SageMaker + Lambda and other hosted solutions. So it might be a mistake to try to move over to K8s in that example ‚Äì you should try to leverage your company‚Äôs existing tech stack where possible!‚Ü©Ô∏é\nMy friend Micha≈Ç Jastrzƒôbski, who specializes in ML infrastructure, has shared the following colorful anecdote with me: ‚Äúwhen I hear Data Scientists shouldn‚Äôt learn K8s‚Äù, I hear ‚ÄúDevOps needs to learn Airflow‚Äù.‚Ü©Ô∏é\nSpecifically, K8s concepts that are relevant are namespaces, labels and RBAC.‚Ü©Ô∏é"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "kareem's Blog",
    "section": "",
    "text": "Hello, I‚Äôm Kareem Elkhateb, I am an experientail learner who dreams, designs, and builds expectional, high-quality digitial produts and services. I also train machines to teach themeselves ü§ñ.\n\n\n\n\n‚ÄúŸÅÿ™ŸãŸâ ÿ¨ÿßŸáÿØŸé ÿßŸÑÿØŸëŸÜŸäÿß Ÿàÿ¨ÿßŸáÿØ ÿ£ŸáŸÑŸéŸáÿß ŸàŸÅŸä ŸÜŸÅÿ≥ŸáŸê ŸÑŸÖ ŸäŸéÿØÿ±Ÿê ŸÉŸäŸÅ Ÿäÿ¨ÿßŸáÿØŸè‚Äù\nThis blog is where i struggle to learn about programming, deep learning and AGI.\nCurrently I‚Äôm Learning NLP, Generative AI and 3D vision to build charming language models that able to talk, hear and see, made me some coffee"
  },
  {
    "objectID": "index.html#get-in-touch",
    "href": "index.html#get-in-touch",
    "title": "kareem's Blog",
    "section": "üíº Get In Touch",
    "text": "üíº Get In Touch\nDo you need help operationalizing ML, Recommendition systems or large language models?\nI‚Äôm open to consulting work and other forms of advisory. Email me at kareem01095134688@gmail.com if you‚Äôd like to chat!"
  },
  {
    "objectID": "index.html#feed",
    "href": "index.html#feed",
    "title": "kareem's Blog",
    "section": "üìÆ Feed",
    "text": "üìÆ Feed\nA curated collection of blog posts and shorter form notes.\n\n\n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\n\n\n\n\n1/11/24\n\n\naxolotl start here\n\n\n\n\n1/9/24\n\n\nDokku: my favorite personal serverless platform\n\n\n\n\n5/30/23\n\n\nOn commercializing nbdev\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#subscribe",
    "href": "index.html#subscribe",
    "title": "kareem's Blog",
    "section": "üì¨ Subscribe",
    "text": "üì¨ Subscribe\nSubscribe via  RSS."
  },
  {
    "objectID": "notes/concurrency.html",
    "href": "notes/concurrency.html",
    "title": "Python Concurrency",
    "section": "",
    "text": "Understand the world of Python concurrency: threads, processes, coroutines and asynchronous programming with a realistic examples.\nSee this blog article."
  },
  {
    "objectID": "notes/web-scraping/browser-to-python.html",
    "href": "notes/web-scraping/browser-to-python.html",
    "title": "Browser requests to code",
    "section": "",
    "text": "I learned this from Zachary Blackwood‚Äôs 2022 NormConf Talk."
  },
  {
    "objectID": "notes/web-scraping/browser-to-python.html#example-get-a-list-of-subway-restaurants-with-python",
    "href": "notes/web-scraping/browser-to-python.html#example-get-a-list-of-subway-restaurants-with-python",
    "title": "Browser requests to code",
    "section": "Example: Get A List of Subway Restaurants With Python",
    "text": "Example: Get A List of Subway Restaurants With Python\n\nGo to https://www.subway.com/en-US/locator in Google Chrome\n\n\n\nOpen developer tools using Option + CMD + I\nGo the the network tab, and hit the clear button\n\n\n\nType in a zipcode and search. Look for a network request that seems like it is getting data, in this case GetLocations.ashx... looks super promising.\n\n\n\nRight click on that particular event and select Copy -&gt; Copy as Curl\n\n\n\nGo to curlconverter.com and paste the curl command there.\n\n\nEnjoy your python code that uses this otherwise undocumented API :)"
  },
  {
    "objectID": "notes/web-scraping/browser-to-python.html#bonus-parse-the-response",
    "href": "notes/web-scraping/browser-to-python.html#bonus-parse-the-response",
    "title": "Browser requests to code",
    "section": "Bonus: Parse The Response",
    "text": "Bonus: Parse The Response\nYou can parse the response data in a hacky way.\n\n# run the code from curlconverter.com, which will give you a `response` object.\n\n&gt;&gt;&gt; import json\n... response_string = response.text\n... json_string = response_string[response_string.index(\"(\") +1:response_string.index('\"AdditionalData\":')-1]+'}'\n... parsed_string = json.loads(json_string)\n... stores = parsed_string['ResultData']\n\n&gt;&gt;&gt; stores\n[{'LocationId': {'StoreNumber': 21809, 'SatelliteNumber': 0},\n  'Address': {'Address1': '4888 NW Bethany Blvd',\n   'Address2': 'Suite K-1',\n   'Address3': 'Bethany Village Centre',\n   'City': 'Portland',\n   'StateProvCode': 'OR',\n   'PostalCode': '97229',\n   'CountryCode': 'US',\n   'CountryCode3': 'USA'},\n  'Geo': {'Latitude': 45.5548,\n   'Longitude': -122.8358,\n   'TimeZoneId': 'America/Los_Angeles',\n   'CurrentUtcOffset': 0},\n  'ListingNumber': 1,\n  'OrderingUrl': 'http://order.subway.com/Stores/Redirect.aspx?s=21809&sa=0&f=r&scc=US&spc=OR',\n  'CateringUrl': 'https://www.ezcater.com/catering/pvt/subway-portland-nw-bethany-blvd',\n  'ExtendedProperties': None},\n..."
  },
  {
    "objectID": "notes/web-scraping/browser-to-python.html#when-to-use-this-approach",
    "href": "notes/web-scraping/browser-to-python.html#when-to-use-this-approach",
    "title": "Browser requests to code",
    "section": "When to use this approach",
    "text": "When to use this approach\nThis is great for adhoc things, but you probably want to use a headless browser and actually scrape the HTML if you want to do this in a repeatable way. But many times you want to do a one-off scrape, this isn‚Äôt so bad!"
  },
  {
    "objectID": "notes/web-scraping/transcribe-diarize.html",
    "href": "notes/web-scraping/transcribe-diarize.html",
    "title": "Transcribe & Diarize Videos",
    "section": "",
    "text": "I wanted to generate transcriptions of videos with speaker labels. Segmenting or labeling the speakers in audio like this is referred to as Diarization or Diarisation (wikipedia). Unfortunately, OpenAi‚Äôs Whisper doesn‚Äôt do diarization."
  },
  {
    "objectID": "notes/web-scraping/transcribe-diarize.html#download-the-audio-file-with-yt-dlp.",
    "href": "notes/web-scraping/transcribe-diarize.html#download-the-audio-file-with-yt-dlp.",
    "title": "Transcribe & Diarize Videos",
    "section": "1. Download the audio file with yt-dlp.",
    "text": "1. Download the audio file with yt-dlp.\nThe -o \"audio.%(ext)s\" argument is used to name the output as audo.mp3. The %(ext)s is a placeholder for the file extension. The --extract-audio and --audio-format mp3 arguments are used to extract the audio from the video and convert it to mp3 format.\nyt-dlp --extract-audio --audio-format mp3 \\\n    -o \"audio.%(ext)s\" https://youtu.be/g_6nQBsE4pU\nThe above command will generate audio.mp3 in the current directory."
  },
  {
    "objectID": "notes/web-scraping/transcribe-diarize.html#generate-the-transcript-with-diarization.",
    "href": "notes/web-scraping/transcribe-diarize.html#generate-the-transcript-with-diarization.",
    "title": "Transcribe & Diarize Videos",
    "section": "2. Generate the transcript with diarization.",
    "text": "2. Generate the transcript with diarization.\nThis is done with WhisperX. Make sure you carefully follow the instructions in the WhisperX repo corresponding to Speaker Diarization: you have to click on three Hugging Face repos and accept their terms & conditions.\nThe video I‚Äôm working with has 2 speakers, so that‚Äôs why I‚Äôm setting --min_speakers and --max_speakers equal to 2. The --hf_token argument is the Hugging Face token you get from following the instructions in the WhisperX repo.\nwhisperx audio.mp3 --model large-v2 --diarize \\\n    --min_speakers 2 --max_speakers 2 --hf_token &lt;your_hf_token&gt;\nThis will produce files with the following extensions audio.{srt, vtt, txt, tsv, json} in the current directory. You can limit the formats with --output_format and write these files to a different directory with --output_dir. The .json file contains the most detailed information about the diarization, with world-level predictions, whereas the .vtt and .srt files will contain a more human-readable transcript with speaker labels. I suggest looking at these files to see which one suits your needs.\nIf looking at the .json file, I recommend using jq with a command like this to see the first row of the segments array in that file:\njq '.segments[0]' audio.json"
  },
  {
    "objectID": "blog/secret.html",
    "href": "blog/secret.html",
    "title": "Kareem‚Äôs Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\naxolotl start here\n\n\n\n\n\n\n\nLLMs\n\n\nfine-tuning\n\n\naxolotl\n\n\n\n\nBest practices for debugging axolotl with an example VSCode config.\n\n\n\n\n\n\nJan 11, 2024\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\nDokku: my favorite personal serverless platform\n\n\n\n\n\n\n\ninfra\n\n\nseverless\n\n\n\n\nLike Heroku, but you own it.\n\n\n\n\n\n\nJan 9, 2024\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\nOn commercializing nbdev\n\n\n\n\n\n\n\nJupyter\n\n\nnbdev\n\n\n\n\nWhy I decided not to commercialize nbdev.\n\n\n\n\n\n\nMay 30, 2023\n\n\nHamel Husain\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/axolotl/index.html#motivation",
    "href": "blog/posts/axolotl/index.html#motivation",
    "title": "axolotl start here",
    "section": "Motivation",
    "text": "Motivation\nAxolotl is a great project for fine-tuning LLMs. I started contributing to the project, and I found that it was difficult to debug. I wanted to share some tips and tricks I learned along the way, along with configuration files for debugging with VSCode. Moreover, I think being able to debug axolotl empowers developers who encounter bugs or want to understand how the code works. I hope this document helps you get started.\n\n\n\n\n\n\nThis content is now part of the Axolotl docs!\n\n\n\nI contributed this blog post‚Äôs contents as documentation for the axolotl project. You can find this content in the axolotl repo here."
  },
  {
    "objectID": "blog/posts/axolotl/index.html#general-tips",
    "href": "blog/posts/axolotl/index.html#general-tips",
    "title": "axolotl start here",
    "section": "General Tips",
    "text": "General Tips\nWhile debugging, it‚Äôs helpful to simplify your test scenario as much as possible. Here are some tips for doing so:\n\n\n\n\n\n\nNote\n\n\n\nAll of these tips are incorporated into the example configuration for debugging with VSCode below.\n\n\n\nMake sure you are using the latest version of axolotl: This project changes often and bugs get fixed fast. Check your git branch and make sure you have pulled the latest changes from main.\nEliminate Concurrency: Restrict the number of processes to 1 for both training and data preprocessing:\n\nSet CUDA_VISIBLE_DEVICES to a single GPU, ex: export CUDA_VISIBLE_DEVICES=0.\nSet dataset_processes: 1 in your axolotl config or run the training command with --dataset_processes=1.\n\nUse a small dataset: Construct or use a small dataset from HF Hub. When using a small dataset, you will often have to make sure sample_packing: False and eval_sample_packing: False to avoid errors. If you are in a pinch and don‚Äôt have time to construct a small dataset but want to use from the HF Hub, you can shard the data (this will still tokenize the entire dataset but will only use a fraction of the data for training. For example, to shard the dataset into 20 pieces, add the following to your axolotl config):\ndataset:\n    ...\n    shards: 20\nUse a small model: A good example of a small model is TinyLlama/TinyLlama-1.1B-Chat-v1.0.\nMinimize iteration time: Make sure the training loop finishes as fast as possible, with these settings.\n\nmicro_batch_size: 1\nmax_steps: 1\nval_set_size: 0\n\nClear Caches: Axolotl caches certain steps and so does the underlying HuggingFace trainer. You may want to clear some of these caches when debugging.\n\nData preprocessing: When debugging data preprocessing, which includes prompt template formation, you may want to delete the directory set in dataset_prepared_path: in your axolotl config. If you didn‚Äôt set this value, the default is last_run_prepared.\nHF Hub: If you are debugging data preprocessing, you should clear the relevant HF cache HuggingFace cache, by deleting the appropriate ~/.cache/huggingface/datasets/... folder(s).\nThe recommended approach is to redirect all outputs and caches to a temporary folder and delete selected subfolders before each run. This is demonstrated in the example configuration below."
  },
  {
    "objectID": "blog/posts/axolotl/index.html#debugging-with-vscode",
    "href": "blog/posts/axolotl/index.html#debugging-with-vscode",
    "title": "axolotl start here",
    "section": "Debugging with VSCode",
    "text": "Debugging with VSCode\n\nBackground\nThe below example shows how to configure VSCode to debug data preprocessing of the sharegpt format. This is the format used when you have the following in your axolotl config:\ndatasets:\n  - path: &lt;path to your sharegpt formatted dataset&gt; # example on HF Hub: philschmid/guanaco-sharegpt-style\n    type: sharegpt\n\n\n\n\n\n\nImportant\n\n\n\nIf you are already familiar with advanced VSCode debugging, you can skip the below explanation and look at the files .vscode/launch.json and .vscode/tasks.json for an example configuration.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you prefer to watch a video, rather than read, you can skip to the video tutorial below (but doing both is recommended).\n\n\n\n\nSetup\nMake sure you have an editable install of Axolotl, which ensures that changes you make to the code are reflected at runtime. Run the following commands from the root of this project:\npip3 install packaging\npip3 install -e '.[flash-attn,deepspeed]'\n\nRemote Hosts\nIf you developing on a remote host, you can easily use VSCode to debug remotely. To do so, you will need to follow this remote - SSH guide. You can also see the video below on Docker and Remote SSH debugging.\n\n\n\nConfiguration\nThe easiest way to get started is to modify the .vscode/launch.json file in the axolotl GitHub repo. This is just an example configuration, so you may need to modify or copy it to suit your needs.\nFor example, to mimic the command cd devtools && CUDA_VISIBLE_DEVICES=0 accelerate launch -m axolotl.cli.train dev_sharegpt.yml, you would use the below configuration1. Note that we add additional flags that override the axolotl config and incorporate the tips above (see the comments). We also set the working directory to devtools and set the env variable HF_HOME to a temporary folder that is later partially deleted. This is because we want to delete the HF dataset cache before each run in order to ensure that the data preprocessing code is run from scratch.\n// https://github.com/OpenAccess-AI-Collective/axolotl/blob/main/.vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug axolotl prompt - sharegpt\",\n            \"type\": \"python\",\n            \"module\": \"accelerate.commands.launch\",\n            \"request\": \"launch\",\n            \"args\": [\n                \"-m\", \"axolotl.cli.train\", \"dev_sharegpt.yml\",\n                // The flags below simplify debugging by overriding the axolotl config \n                // with the debugging tips above.  Modify as needed.\n                \"--dataset_processes=1\",      // limits data preprocessing to one process\n                \"--max_steps=1\",              // limits training to just one step\n                \"--batch_size=1\",             // minimizes batch size\n                \"--micro_batch_size=1\",       // minimizes batch size\n                \"--val_set_size=0\",           // disables validation\n                \"--sample_packing=False\",     // disables sample packing which is necessary for small datasets\n                \"--eval_sample_packing=False\",// disables sample packing on eval set\n                \"--dataset_prepared_path=temp_debug/axolotl_outputs/data\", // send data outputs to a temp folder\n                \"--output_dir=temp_debug/axolotl_outputs/model\" // send model outputs to a temp folder\n                ],\n            \"console\": \"integratedTerminal\",      // show output in the integrated terminal\n            \"cwd\": \"${workspaceFolder}/devtools\", // set working directory to devtools from the root of the project\n            \"justMyCode\": true,                   // step through only axolotl code\n            \"env\": {\"CUDA_VISIBLE_DEVICES\": \"0\",  // Since we aren't doing distributed training, we need to limit to one GPU\n                    \"HF_HOME\": \"${workspaceFolder}/devtools/temp_debug/.hf-cache\"}, // send HF cache to a temp folder\n            \"preLaunchTask\": \"cleanup-for-dataprep\", // delete temp folders (see below)\n        }\n    ]\n}\nAdditional notes about this configuration:\n\nThe argument justMyCode is set to true such that you step through only the axolotl code. If you want to step into dependencies, set this to false.\nThe preLaunchTask: cleanup-for-dataprep is defined in .vscode/tasks.json and is used to delete the following folders before debugging, which is essential to ensure that the data pre-processing code is run from scratch:\n\n./devtools/temp_debug/axolotl_outputs\n./devtools/temp_debug/.hf-cache/datasets\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou may not want to delete these folders. For example, if you are debugging model training instead of data pre-processing, you may NOT want to delete the cache or output folders. You may also need to add additional tasks to the tasks.json file depending on your use case.\n\n\nBelow is the ./vscode/tasks.json file that defines the cleanup-for-dataprep task. This task is run before each debugging session when you use the above configuration. Note how there are two tasks that delete the two folders mentioned above. The third task cleanup-for-dataprep is a composite task that combines the two tasks. A composite task is necessary because VSCode does not allow you to specify multiple tasks in the preLaunchTask argument of the launch.json file.\n// https://github.com/OpenAccess-AI-Collective/axolotl/blob/main/.vscode/tasks.json\n// this file is used by launch.json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      // this task changes into the devtools directory and deletes the temp_debug/axolotl_outputs folder\n      {\n        \"label\": \"delete-outputs\",\n        \"type\": \"shell\",\n        \"command\": \"rm -rf temp_debug/axolotl_outputs\",\n        \"options\":{ \"cwd\": \"${workspaceFolder}/devtools\"},\n        \"problemMatcher\": []\n      },\n      // this task changes into the devtools directory and deletes the `temp_debug/.hf-cache/datasets` folder\n      {\n        \"label\": \"delete-temp-hf-dataset-cache\",\n        \"type\": \"shell\",\n        \"command\": \"rm -rf temp_debug/.hf-cache/datasets\",\n        \"options\":{ \"cwd\": \"${workspaceFolder}/devtools\"},\n        \"problemMatcher\": []\n      },\n        // this task combines the two tasks above\n      {\n       \"label\": \"cleanup-for-dataprep\",\n       \"dependsOn\": [\"delete-outputs\", \"delete-temp-hf-dataset-cache\"],\n      }\n    ]\n}\n\n\nCustomizing your debugger\nYour debugging use case may differ from the example above. The easiest thing to do is to put your own axolotl config in the devtools folder and modify the launch.json file to use your config. You may also want to modify the preLaunchTask to delete different folders or not delete anything at all.\n\n\nVideo Tutorial\nThe following video tutorial walks through the above configuration and demonstrates how to debug with VSCode:"
  },
  {
    "objectID": "blog/posts/axolotl/index.html#debugging-with-docker",
    "href": "blog/posts/axolotl/index.html#debugging-with-docker",
    "title": "axolotl start here",
    "section": "Debugging With Docker",
    "text": "Debugging With Docker\nUsing official Axolotl Docker images is a great way to debug your code, and is a very popular way to use Axolotl. Attaching VSCode to Docker takes a few more steps.\n\nSetup\nOn the host that is running axolotl (ex: if you are using a remote host), clone the axolotl repo and change your current directory to the root:\ngit clone https://github.com/OpenAccess-AI-Collective/axolotl\ncd axolotl\n\n\n\n\n\n\nTip\n\n\n\nIf you already have axolotl cloned on your host, make sure you have the latest changes and change into the root of the project.\n\n\nNext, run the desired docker image and mount the current directory. Below is a docker command you can run to do this:2\ndocker run --privileged --gpus '\"all\"' --shm-size 10g --rm -it --name axolotl --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 --mount type=bind,src=\"${PWD}\",target=/workspace/axolotl -v ${HOME}/.cache/huggingface:/root/.cache/huggingface winglian/axolotl:main-py3.10-cu118-2.0.1\n\n\n\n\n\n\nTip\n\n\n\nTo understand which containers are available, see the Docker section of the README and the DockerHub repo. For details of how the Docker containers are built, see axolotl‚Äôs Docker CI builds.\n\n\nYou will now be in the container. Next, perform an editable install of Axolotl:\npip3 install packaging\npip3 install -e '.[flash-attn,deepspeed]'\n\n\nAttach To Container\nNext, if you are using a remote host, Remote into this host with VSCode. If you are using a local host, you can skip this step.\nNext, select Dev Containers: Attach to Running Container... using the command palette (CMD + SHIFT + P) in VSCode. You will be prompted to select a container to attach to. Select the container you just created. You will now be in the container with a working directory that is at the root of the project. Any changes you make to the code will be reflected both in the container and on the host.\nNow you are ready to debug as described above (see Debugging with VSCode).\n\n\nVideo - Attaching To Docker On Remote Host\nHere is a short video that demonstrates how to attach to a Docker container on a remote host:"
  },
  {
    "objectID": "blog/posts/axolotl/index.html#footnotes",
    "href": "blog/posts/axolotl/index.html#footnotes",
    "title": "axolotl start here",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe config actually mimics the command CUDA_VISIBLE_DEVICES=0 python -m accelerate.commands.launch -m axolotl.cli.train devtools/sharegpt.yml, but this is the same thing.‚Ü©Ô∏é\nMany of the below flags are recommended best practices by Nvidia when using nvidia-container-toolkit. You can read more about these flags here.‚Ü©Ô∏é"
  },
  {
    "objectID": "blog/posts/dokku/index.html",
    "href": "blog/posts/dokku/index.html",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "",
    "text": "With Dokku, you can turn a VPS into a powerful serverless platform"
  },
  {
    "objectID": "blog/posts/dokku/index.html#what-is-dokku",
    "href": "blog/posts/dokku/index.html#what-is-dokku",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "What is Dokku?",
    "text": "What is Dokku?\nDokku is an open-source Platform as a Service (PaaS) that runs on a single server of your choice. It‚Äôs like Heroku, but you own it. It is a great way to get the benefits of Heroku without the costs (Heroku can get quite expensive!). I need to deploy many applications for my LLM consulting work. Having a cost-effective, easy-to-use serverless platform is essential for me.\nI run a Dokku server on a $7/month VPS on OVHcloud for non-gpu workloads. These applications include things like nbsanity and data cleaning tools for LLMs.\nSome of the features I love about Dokku:\n\nEasy to use (like Heroku).\nAutomatic SSL certificate management via Let‚Äôs Encrypt.\nBasic Auth support so I can password-protect sites.\nScale up and down with a single command.\nFlexibility to handle any application (Node, Python, etc), including defining a Docker container.\nLots of official plugins that do almost anything I want.\nEasily deploy with git commands."
  },
  {
    "objectID": "blog/posts/dokku/index.html#deploying-apps-as-a-docker-container",
    "href": "blog/posts/dokku/index.html#deploying-apps-as-a-docker-container",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "Deploying Apps as A Docker Container",
    "text": "Deploying Apps as A Docker Container\nAn easy way to deploy applications is with a Docker container.\nTo deploy a Docker container, I put a Dockerfile in the root of my git repo like this:\n\n\nDockerfile\n\nFROM python:3.10\n\nCOPY . /app\nWORKDIR /app\n\n# Install the local package\nRUN pip install .\n\n# This directory contains app.py, a FastApi app\nWORKDIR /app/\n\nENTRYPOINT [\"./entrypoint.sh\"]\n\n\n\n\n\n\n\nTip\n\n\n\nThe entrypoint.sh script allows me to easily run the app locally or in a Docker container. It looks like this:\n\n\nentrypoint.sh\n\n#!/bin/bash\nexec uvicorn main:app --port \"$PORT\" --host 0.0.0.0\n\n\n\nOn the Dokku host, create the app:\ndokku apps:create myapp\nLocally, set up access to the Dokku host and name it dokku in your ~/.ssh/config file. For example, here is mine:\nHost dokku\n  HostName &lt;The external IP address of your Dokku host&gt;\n  User ubuntu\n  IdentityFile /Users/hamel/.ssh/dokku\nLocally, add the Dokku host as a remote and push to it:\ngit remote add dokku dokku@dokku:myapp\ngit push dokku main\nThat‚Äôs it - your app should be running on the Dokku host! Your local logs will print the URL that your application is served on, which by default will be myapp.yourdomain.com. You can also scale it up/down with the following command:\n#scale to two workers\ndokku ps:scale myapp web=2\nWe are just scratching the surface. For more details, see the Dokku docs."
  },
  {
    "objectID": "blog/posts/dokku/index.html#static-sites",
    "href": "blog/posts/dokku/index.html#static-sites",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "Static Sites",
    "text": "Static Sites\nGitHub Pages is annoying in that you can‚Äôt easily deploy private static sites without paying for an expensive Enterprise account. With Dokku, you can easily deploy a static site from a private GitHub Repo and password-protect it.\nWe will assume that you have a static site in a git repo in a folder named _site.\nOn the Dokku host, create an app named mysite and set the NGINX_ROOT environment variable to _site:\ndokku apps:create mystite\ndokku config:set static-site NGINX_ROOT=_site\nAlso on the Dokku host, install basic auth and set permissions so the plugin can work properly.\n# do setup for the auth plugin that we will use later\nsudo dokku plugin:install https://github.com/dokku/dokku-http-auth.git\nsudo chmod +x /home/dokku\nThen execute the following commands from the root of your git repo that contains the static site. :\n1touch .static\n2echo BUILDPACK_URL=https://github.com/dokku/buildpack-nginx &gt; .env\n3git remote add dokku dokku@dokku:mysite\n\n1\n\ntells dokku that this is a static site\n\n2\n\ntells dokku to use the nginx buildpack for static sites (it will usually automatically detect this, but if you have a project with code and a static site, you need to tell it to use the nginx buildpack so it doesn‚Äôt get confused).\n\n3\n\nadd the dokku host as a remote. For this to work, make sure dokku is a hostname in your ~/.ssh/config file as described in the previous section.\n\n\nFinally, deploy your application:\ngit push dokku main\nYou can now add auth by running the following command on the Dokku host:\ndokku http-auth:enable mystite &lt;username&gt; &lt;password&gt;\n\n\n\n\n\n\nNote\n\n\n\nYou can add multiple usernames/passwords and even filter specific IPs. See the docs.\n\n\n\n\n\n\n\n\nSSL / HTTPS\n\n\n\nIt‚Äôs often desirable to have HTTPS for your site. Dokku makes this easy with the Let‚Äôs Encrypt Plugin, which will even auto-renew for you. I don‚Äôt use this, because I‚Äôm letting Cloudflare handle this with its proxy.\nIf you are using Cloudflare this way, activating this plugin will mess things up (don‚Äôt worry its easy to disable). Honestly, I think it‚Äôs easier to let Cloudflare handle it if you are already doing so."
  },
  {
    "objectID": "blog/posts/dokku/index.html#run-commands-remotely",
    "href": "blog/posts/dokku/index.html#run-commands-remotely",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "Run commands remotely",
    "text": "Run commands remotely\nYou don‚Äôt have to ssh into the Dokku host just to execute commands. You can execute them remotely via the dokku user like this:\n# https://dokku.com/docs/deployment/application-management/\nssh dokku@rechat.co apps:list"
  },
  {
    "objectID": "blog/posts/dokku/index.html#docker-cache",
    "href": "blog/posts/dokku/index.html#docker-cache",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "Docker cache",
    "text": "Docker cache\nThis is how you can invalidate the docker cache for a fresh build:\nssh dokku@rechat.co repo:purge-cache llm-eval"
  },
  {
    "objectID": "blog/posts/dokku/index.html#rebuild-without-pushing",
    "href": "blog/posts/dokku/index.html#rebuild-without-pushing",
    "title": "Dokku: my favorite personal serverless platform",
    "section": "Rebuild without pushing",
    "text": "Rebuild without pushing\nSometimes you want to rebuild without pushing. There are many ways to do this, but one way is like this:\nssh dokku@rehcat.co ps:rebuild llm-eval"
  },
  {
    "objectID": "guest-blog.html",
    "href": "guest-blog.html",
    "title": "Guest Blogs",
    "section": "",
    "text": "nbdev + Quarto: A new secret weapon for productivity, the fastai blog, July 2022.\nNotebooks in production with Metaflow Introduces a new Metaflow feature that allows users to use notebooks in production ML workflows.\nPython Concurrency: The Tricky Bits: An exploration of threads, processes, and coroutines in Python, with interesting examples that illuminate the differences between each.\nghapi, a new third-party Python client for the GitHub API by Jeremy Howard & Hamel Husain, GitHub Repo.\nNbdev: A literate programming environment that democratizes software engineering best practices by Hamel Husain, Jeremy Howard, The GitHub Blog.\nfastcore: An Underrated Python Library by Hamel Husain, Jeremy Howard, GitHub Repo.\nData Science Meets Devops: MLOps with Jupyter, Git, & Kubernetes: An end-to-end example of deploying a machine learning product using Jupyter, Papermill, Tekton, GitOps and Kubeflow. by Jeremy Lewi, Hamel_Husain, The Kubeflow Blog.\nIntroducing fastpages, An easy to use blogging platform with extra features for Jupyter Notebooks. by Jeremy Howard & Hamel Husain, GitHub Repo\nGitHub Actions: Providing Data Scientists With New Superpowers by Jeremy Howard & Hamel Husain.\nCodeSearchNet Challenge: Evaluating the State of Semantic Code Search: by Miltiadis Allamanis, Marc Brockschmidt, Hamel Husain, Ho-Hsiang Wu, Tiferet Gazit GitHub Repo\nHow To Create Natural Language Semantic Search for Arbitrary Objects With Deep¬†Learning. (Related: GitHub engineering blog article, Live demo)\nHow To Create Magical Data Products Using Sequence-to-Sequence Models\nHow to Automate Tasks on GitHub With Machine Learning for Fun and Profit\nHow Docker Can Make You A More Effective Data Scientist\nAutomated Machine Learning, A Paradigm Shift That Accelerates Data Scientst Productivity At Airbnb"
  },
  {
    "objectID": "notes/linux/bash_scripting.html",
    "href": "notes/linux/bash_scripting.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Link to class.\nLink to GitHub repo\n\n;\n\n\n\nwas originally a program called bin/sh\nBourne Shell: introduced more advanced structure into the shell.\n\nBourne Again Shell (Bash): Second iteration of Bourne Shell.\n\n\n\n\nls -a ~/ | grep bash\n    Ôíâ  .bash_history\n    Ôíâ  .bash_profile\n    ÔÖõ  .bash_profile.backup\n    ÔÖõ  .bash_profile.bensherman\n    ÔÖõ  .bash_profile_copy\n    ÔÑï  .bash_sessions/\n    Ôíâ  git-completion.bash\n\n\n\n.bash_profile: executed when you login -&gt; configures the shell when you get an initial command prompt. This is different than .bashrc.\n\ncommonly loads the ~/.bashrc file as well.\nbin is traditionally the folder for binaries.\nbash_profile is designed to run when you login, so if you change it will not refresh until you login next time.\n\n\n\n\n\n.bashrc it is executed simply before the command shell comes up, does not have to wait until you login.\netc/bashrc are system bashrc files which is like a ‚Äútemplate‚Äù for user bashrc files. Anytime a new user is created, it inherits from this template and sometimes automated customizations are applied. This is usually done by simply importing etc/bashrc from each user‚Äôs bashrc file.\nenv will list all env variables.\nto apply .bashrc you just have to run the command bash as it will start another shell from your current one. However, if you run bash you can now exit without closing the shell, because a shell is running inside another shell.\n\n\n\n\n\n~/.bash_history contains lots of history. By default will only capture last 100 but you can change this setting.\n\nyou can exlude something from saving to history (like passwords) by using an ignorespace\nthe environment variable HIST_CONTROL can be used to control how much history to keep and settings about what should not be logged. One way to turn off loggin is: bash     export HISTCONTROL=$HISTCONTROL:ignorespace this allow you to skip logging by adding a space to the the beginning of any command. If you want to see what is in HIST_CONTROL you will see:\n&gt; cat ~/.bash_history | grep HISTCONTROL\nHISTCONTROL=ignoredups:ignorespace\nignoredups was already set to this variable.\n\n\n\n\n\nDoesn‚Äôt always exist on a system. in most cases the contents of the ~/.bash_logout will be empty or contain a comment.\nThe role of this file is to execute things when you exit the shell. If you close the shell it will not work, you have to do a clean exit instead.\nCommon use is to use this to clear out ~/.bashrc with the original to clear out any changes the user may have made. You can accomplish this by copying a backup:\ncp ~/.bashrc.original ~/.bashrc\n\n\n\n\n\nPut your shell scripts in a folder you can find them. We can put them in ~/bin:\n&gt; mkdir bin\nMake sure in ~/.bash_profile you have:\nPATH=$PATH:$HOME/bin\nexport PATH\n\n\n\nTo make test.sh executable run command chmod u+x test.sh\n\nYou can also run chmod 755\n\n\n\n\ncan use any name that is not an environment variable (check with env).\nby convention variable names in ALLCAPS. bash     &gt; FIRSTNAME=\"Hamel\"\n  - No space b/w = and value.\n  - Good idea to __always__ put value in double quotes `\"`, although this is not required in every case.  \nAs a practice you want to use export command to set is as an environment variable. This makes the variable available to any subprocess that starts from the shell. Read more about this here.\n&gt; export FIRSTNAME\n&gt; echo \"Hello, $FIRSTNAME\"\n\"Hello Hamel\"\n\n&gt; export FIRSTNAME=\"Hamel\" # do this in one step\nThe above example could work without export, too just reinforcing that its a good idea to use this as a habit. You can do this in one step:\n\n\n\n&gt; export TODAYSDATE=`date`  # executes date command\n\n\n\n\n```bash\nMYUSERNAME='hamel'\nMYPASSWORD='password'\nSTARTOFSCRIPT=`date`\n\necho \"My login name for this app is $MYUSERNAME\"\necho \"My login password for this app is $MYPASSWORD\"\necho \"I started this script at $STARTOFSCRIPT\"\n\nENDOFSCRIPT=`date`\n\necho \"I ended the script at $ENDOFSCRIPT\"\n```\n\nThese variables only live within the sub-shell that executes the script.\n\n\n\n\n\nMethod 1 (Static): Assign command result to variable. Only runs the command at time of variable assignment.\n\n    TODAYSDATE=`date`\n    USERFILES=`find /home -user user` # find all directories owned by the user \"user\"\n\n    echo \"Today's Date: $TODAYSDATE\"\n    echo \"All files owned by USER: $USERFILES\"\n\nMethod 2: Use an alias, which allows you to run a command every time you call the alias. For aliases to work this way you must use the shopt command, which allows aliases to be useable in shell scripts. Technically referred to as ‚Äúexpanding aliases within a subshell‚Äù.\n\n    #!/bin/bash\n    shopt -s expand_aliases\n\n    # notice that we don't use backticks here because the command we want to execute is put in \"..\"\n    alias TODAY=\"date\" \n    alias UFILES=\"find /home -user user\"\n\n\n    A=`TODAY` #Executes the command date\n    B=`UFILES`#Executes the command \n    echo \"With Alias, TODAY is: $A\" echo \"With Alias, UFILES is: $B\"\n\n\n\n\nValue = 0 means everything is ok\nValue != 0 means something is wrong.\nSee last exit status w/ the $? command:\n\n    &gt; ls\n    &gt; echo $?\n    0\n\n\n\nUnlike python, shell scripts will continue executing even if there is an error. You can prevent this by using set -e\n\n    set -e # means exit the shell if there is an error, don't continue.\n\n\n\n\n    expr 1 + 2\n    expr 2 \\* 2 # you have to escape the *\n    expr \\( 2 + 2 \\) \\* 4  # you must also escape the ( )\n\nCaveat: You need a space on each side of the operator.\n\n\n\n\n\n\nenv and printenv will tell you your global vars\nset will give you things from your session. This will also usually contain everything from your global scope. set is a superset of env.\nReserved names: see study guide or google it.\n\n\n\nunset MY_VAR\n\n\n\n\n\n$ escapes a single character.\nsingle quotes '..' treats something as a string, escapes the whole thing\ndouble quotes do not escape anything.\n\n&gt; echo \"\\$COL\"  # this will escape the $\n$COL\n\n&gt; echo '$COL' # single quotes escape things, means the literal string\n$COL\n\n&gt; echo \"$COL\" # does not escape anything\n250\n\n&gt; echo \"The date is: `date`\" # command substitution with bacticks\nThe date is Mon Jul 25"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#history-of-bash",
    "href": "notes/linux/bash_scripting.html#history-of-bash",
    "title": "Cheatsheet",
    "section": "",
    "text": "was originally a program called bin/sh\nBourne Shell: introduced more advanced structure into the shell.\n\nBourne Again Shell (Bash): Second iteration of Bourne Shell."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#bash-configuration",
    "href": "notes/linux/bash_scripting.html#bash-configuration",
    "title": "Cheatsheet",
    "section": "",
    "text": "ls -a ~/ | grep bash\n    Ôíâ  .bash_history\n    Ôíâ  .bash_profile\n    ÔÖõ  .bash_profile.backup\n    ÔÖõ  .bash_profile.bensherman\n    ÔÖõ  .bash_profile_copy\n    ÔÑï  .bash_sessions/\n    Ôíâ  git-completion.bash\n\n\n\n.bash_profile: executed when you login -&gt; configures the shell when you get an initial command prompt. This is different than .bashrc.\n\ncommonly loads the ~/.bashrc file as well.\nbin is traditionally the folder for binaries.\nbash_profile is designed to run when you login, so if you change it will not refresh until you login next time.\n\n\n\n\n\n.bashrc it is executed simply before the command shell comes up, does not have to wait until you login.\netc/bashrc are system bashrc files which is like a ‚Äútemplate‚Äù for user bashrc files. Anytime a new user is created, it inherits from this template and sometimes automated customizations are applied. This is usually done by simply importing etc/bashrc from each user‚Äôs bashrc file.\nenv will list all env variables.\nto apply .bashrc you just have to run the command bash as it will start another shell from your current one. However, if you run bash you can now exit without closing the shell, because a shell is running inside another shell.\n\n\n\n\n\n~/.bash_history contains lots of history. By default will only capture last 100 but you can change this setting.\n\nyou can exlude something from saving to history (like passwords) by using an ignorespace\nthe environment variable HIST_CONTROL can be used to control how much history to keep and settings about what should not be logged. One way to turn off loggin is: bash     export HISTCONTROL=$HISTCONTROL:ignorespace this allow you to skip logging by adding a space to the the beginning of any command. If you want to see what is in HIST_CONTROL you will see:\n&gt; cat ~/.bash_history | grep HISTCONTROL\nHISTCONTROL=ignoredups:ignorespace\nignoredups was already set to this variable.\n\n\n\n\n\nDoesn‚Äôt always exist on a system. in most cases the contents of the ~/.bash_logout will be empty or contain a comment.\nThe role of this file is to execute things when you exit the shell. If you close the shell it will not work, you have to do a clean exit instead.\nCommon use is to use this to clear out ~/.bashrc with the original to clear out any changes the user may have made. You can accomplish this by copying a backup:\ncp ~/.bashrc.original ~/.bashrc"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#shell-scripts",
    "href": "notes/linux/bash_scripting.html#shell-scripts",
    "title": "Cheatsheet",
    "section": "",
    "text": "Put your shell scripts in a folder you can find them. We can put them in ~/bin:\n&gt; mkdir bin\nMake sure in ~/.bash_profile you have:\nPATH=$PATH:$HOME/bin\nexport PATH\n\n\n\nTo make test.sh executable run command chmod u+x test.sh\n\nYou can also run chmod 755\n\n\n\n\ncan use any name that is not an environment variable (check with env).\nby convention variable names in ALLCAPS. bash     &gt; FIRSTNAME=\"Hamel\"\n  - No space b/w = and value.\n  - Good idea to __always__ put value in double quotes `\"`, although this is not required in every case.  \nAs a practice you want to use export command to set is as an environment variable. This makes the variable available to any subprocess that starts from the shell. Read more about this here.\n&gt; export FIRSTNAME\n&gt; echo \"Hello, $FIRSTNAME\"\n\"Hello Hamel\"\n\n&gt; export FIRSTNAME=\"Hamel\" # do this in one step\nThe above example could work without export, too just reinforcing that its a good idea to use this as a habit. You can do this in one step:\n\n\n\n&gt; export TODAYSDATE=`date`  # executes date command\n\n\n\n\n```bash\nMYUSERNAME='hamel'\nMYPASSWORD='password'\nSTARTOFSCRIPT=`date`\n\necho \"My login name for this app is $MYUSERNAME\"\necho \"My login password for this app is $MYPASSWORD\"\necho \"I started this script at $STARTOFSCRIPT\"\n\nENDOFSCRIPT=`date`\n\necho \"I ended the script at $ENDOFSCRIPT\"\n```\n\nThese variables only live within the sub-shell that executes the script.\n\n\n\n\n\nMethod 1 (Static): Assign command result to variable. Only runs the command at time of variable assignment.\n\n    TODAYSDATE=`date`\n    USERFILES=`find /home -user user` # find all directories owned by the user \"user\"\n\n    echo \"Today's Date: $TODAYSDATE\"\n    echo \"All files owned by USER: $USERFILES\"\n\nMethod 2: Use an alias, which allows you to run a command every time you call the alias. For aliases to work this way you must use the shopt command, which allows aliases to be useable in shell scripts. Technically referred to as ‚Äúexpanding aliases within a subshell‚Äù.\n\n    #!/bin/bash\n    shopt -s expand_aliases\n\n    # notice that we don't use backticks here because the command we want to execute is put in \"..\"\n    alias TODAY=\"date\" \n    alias UFILES=\"find /home -user user\"\n\n\n    A=`TODAY` #Executes the command date\n    B=`UFILES`#Executes the command \n    echo \"With Alias, TODAY is: $A\" echo \"With Alias, UFILES is: $B\"\n\n\n\n\nValue = 0 means everything is ok\nValue != 0 means something is wrong.\nSee last exit status w/ the $? command:\n\n    &gt; ls\n    &gt; echo $?\n    0\n\n\n\nUnlike python, shell scripts will continue executing even if there is an error. You can prevent this by using set -e\n\n    set -e # means exit the shell if there is an error, don't continue.\n\n\n\n\n    expr 1 + 2\n    expr 2 \\* 2 # you have to escape the *\n    expr \\( 2 + 2 \\) \\* 4  # you must also escape the ( )\n\nCaveat: You need a space on each side of the operator."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#global-and-local-environment-variables",
    "href": "notes/linux/bash_scripting.html#global-and-local-environment-variables",
    "title": "Cheatsheet",
    "section": "",
    "text": "env and printenv will tell you your global vars\nset will give you things from your session. This will also usually contain everything from your global scope. set is a superset of env.\nReserved names: see study guide or google it.\n\n\n\nunset MY_VAR"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#special-characters-quotes-escapes",
    "href": "notes/linux/bash_scripting.html#special-characters-quotes-escapes",
    "title": "Cheatsheet",
    "section": "",
    "text": "$ escapes a single character.\nsingle quotes '..' treats something as a string, escapes the whole thing\ndouble quotes do not escape anything.\n\n&gt; echo \"\\$COL\"  # this will escape the $\n$COL\n\n&gt; echo '$COL' # single quotes escape things, means the literal string\n$COL\n\n&gt; echo \"$COL\" # does not escape anything\n250\n\n&gt; echo \"The date is: `date`\" # command substitution with bacticks\nThe date is Mon Jul 25"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#using-devnull",
    "href": "notes/linux/bash_scripting.html#using-devnull",
    "title": "Cheatsheet",
    "section": "Using dev/null",
    "text": "Using dev/null\nUse dev/null when you want to discard output and don‚Äôt want to put in the background. /dev/null is a device, and like everything is a file in linux. Everything you write to dev/null just dissapears.\nFor example:\n#!/bin/bash\n#redirect to dev/null example\n\necho \"This is going to the blackhole.\" &gt;&gt; /dev/null\nNote &gt;&gt; (append) or &gt; (overwrite) will work for dev/null, although out of habit in other scenarios it is better to append when unsure using &gt;&gt;."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#redirect-std-error",
    "href": "notes/linux/bash_scripting.html#redirect-std-error",
    "title": "Cheatsheet",
    "section": "Redirect Std Error",
    "text": "Redirect Std Error\nls -l /bin/usr 2&gt; ls-error.txt"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#redirect-std-out-err-into-one-file",
    "href": "notes/linux/bash_scripting.html#redirect-std-out-err-into-one-file",
    "title": "Cheatsheet",
    "section": "Redirect Std Out & Err into one file",
    "text": "Redirect Std Out & Err into one file\nls  -l /bin/sur &gt; ls-output.txt 2&gt;&1\nShortcut: use &\nls  -l /bin/sur &&gt; ls-output.txt"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#dispose-std-err-output-devnull",
    "href": "notes/linux/bash_scripting.html#dispose-std-err-output-devnull",
    "title": "Cheatsheet",
    "section": "Dispose Std Err output /dev/null",
    "text": "Dispose Std Err output /dev/null\nls -l /bin/sur 2&gt; /dev/null"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#brace-expansion",
    "href": "notes/linux/bash_scripting.html#brace-expansion",
    "title": "Cheatsheet",
    "section": "Brace Expansion",
    "text": "Brace Expansion\n&gt; echo Hello-{Foo,Bar,Baz}-World                             \nHello-Foo-World Hello-Bar-World Hello-Baz-World"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#parameter-expansion-like-coalesce",
    "href": "notes/linux/bash_scripting.html#parameter-expansion-like-coalesce",
    "title": "Cheatsheet",
    "section": "Parameter Expansion, Like Coalesce",
    "text": "Parameter Expansion, Like Coalesce\n{parameter:-word}\nIf parameter is unset (i.e., does not exist) or is empty, this expansion results in the value of word. If parameter is not empty, the expansion results in the value of parameter."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#types-of-variables-1",
    "href": "notes/linux/bash_scripting.html#types-of-variables-1",
    "title": "Cheatsheet",
    "section": "Types of Variables",
    "text": "Types of Variables\n# declare int variable:\n&gt; declare -i NEWVAR=10\n\n# inpsect type of NEWVAR\n&gt; declare -p NEWVAR\ndeclare -i NEWVAR=\"10\"\n\n# declare readonly variable\n&gt; declare -r READONLY=\"This is something we cannot overwrite\"\n\n# try to cancel READONLY type\n&gt; declare +r READONLY\n### will result in an error\nVariables in bash are implicitly typed, the type will be inferred from the value you assign.\n\ndetermine the type of a variable: declare -p $MYVAR\ndeclare variable as integer: bash      declare -i NEWVAR=10\nIf you explicitly declare a variable as an int but assign it to a string, it will implicitly convert the value to 0."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#the-if-statement",
    "href": "notes/linux/bash_scripting.html#the-if-statement",
    "title": "Cheatsheet",
    "section": "The if statement",
    "text": "The if statement\n3\necho ‚ÄúGuess the Secret Number‚Äù\necho ‚Äú======================‚Äú\necho ‚Äú‚Äù\necho ‚ÄúEnter a Number Between 1 and 5‚Äù\nread GUESS\n\n\nif [ $GUESS -eq 3 ]\n    then\n        echo ‚ÄúYou guessed the Correct Number!‚Äù\nfi\nTest if a file exists\nFILENAME=$1\necho ‚ÄúTesting for the existence of a file called $FILENAME‚Äù\n\nif [ -a $FILENAME ]\n    then\n        echo ‚Äú$FILENAME does exist!‚Äù\nfi\n\n# negation operator \nif [! -a $FILENAME ]\n    then\n        echo ‚Äú$FILENAME does not exist!‚Äù\nfi\n\n# test multiple expressions in if statement\n\nif [ -f $FILENAME ] && [ -R $FILENAME]\n    then\n        echo ‚ÄúFile $FILENAME exists and is readable.‚Äù\nfi\n-a is the same as -f w.r.t. testing for the existence of a file."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#ifthenelse",
    "href": "notes/linux/bash_scripting.html#ifthenelse",
    "title": "Cheatsheet",
    "section": "If/Then/Else",
    "text": "If/Then/Else\necho ‚ÄúEnter a number between 1 and 3:‚Äù\nread VALUE\n\n# use semicolons for readability\nif [ ‚Äú$VALUE‚Äù -eq ‚Äú1‚Äù ]; then\n    echo ‚ÄúYou entered $VALUE‚Äù\nfi\nUsing an OR statement:\n# another variation\nif [ ‚Äú$VALUE‚Äù -eq ‚Äú1‚Äù ] || [ ‚Äú$VALUE‚Äù -eq ‚Äú2‚Äù ] || [ ‚Äú$VALUE‚Äù -eq ‚Äú3‚Äù ]; then\n    echo ‚ÄúYou entered $VALUE‚Äù\nelse\n    echo ‚ÄúYou didn‚Äôt follow directions!‚Äù\nfi\nRedirect errors to /dev/null\nif [ ‚Äú$VALUE‚Äù -eq ‚Äú1‚Äù ] 2&gt;/dev/null || [ ‚Äú$VALUE‚Äù -eq ‚Äú2‚Äù ] 2&gt;/dev/null || [ ‚Äú$VALUE‚Äù -eq ‚Äú3‚Äù ] 2&gt;/dev/null; then\n    echo ‚ÄúYou entered $VALUE‚Äù\nelse\n    echo ‚ÄúYou didn‚Äôt follow directions!‚Äù\nfi\n\nif [ ‚Äú$VALUE‚Äù -eq ‚Äú1‚Äù ] 2&gt;/dev/null; then\n    echo ‚ÄúYou entered #1‚Äù\nelif ‚Äú \"$VAL‚ÄùE\" -e‚Äú ‚Äù2\" ] 2&gt;/dev/null; then\n    ech‚Äú \"You entered ‚Äù2\"\nelif ‚Äú \"$VAL‚ÄùE\" -e‚Äú ‚Äù3\" ] 2&gt;/dev/null; then\n    ech‚Äú \"You entered ‚Äù3\"\nelse\n    ech‚Äú \"You di‚Äôn't follow direction‚Äù!\"\nfi"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#file-expressions",
    "href": "notes/linux/bash_scripting.html#file-expressions",
    "title": "Cheatsheet",
    "section": "File Expressions",
    "text": "File Expressions"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#string-expressions",
    "href": "notes/linux/bash_scripting.html#string-expressions",
    "title": "Cheatsheet",
    "section": "String Expressions",
    "text": "String Expressions"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#integer-expressions",
    "href": "notes/linux/bash_scripting.html#integer-expressions",
    "title": "Cheatsheet",
    "section": "Integer Expressions",
    "text": "Integer Expressions"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#for-loop",
    "href": "notes/linux/bash_scripting.html#for-loop",
    "title": "Cheatsheet",
    "section": "For Loop",
    "text": "For Loop\n#!/bin/bash\necho ‚ÄúList all the shell scripts contents of the directory‚Äù\nSHELLSCRIPTS=`ls *.sh`\n\n# alternate using for loop\n\nfor FILE in *.sh; do\n    echo ‚Äú$FILE‚Äù\ndone"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#case-statement",
    "href": "notes/linux/bash_scripting.html#case-statement",
    "title": "Cheatsheet",
    "section": "Case Statement",
    "text": "Case Statement\n#!/bin/bash\n\necho ‚Äú1) Choice 2‚Äù\necho ‚Äú2) Choice 2‚Äù\necho ‚Äú3) Choice 3‚Äù\necho ‚ÄúEnter Choice:‚Äù\n\nread MENUCHOICE\n\ncase $MENUCHOICE in\n    1)\n        echo ‚ÄúYou have choosen the first option‚Äù;;\n    2)\n        echo ‚ÄúYou have chosen the second option‚Äù;;\n    3) \n        echo ‚ÄúYou have selected the third option‚Äù;;\n    *)\n        echo ‚ÄúYou have choosen unwisely‚Äù;;\n\nMatch Multiple Case Statements\nAllow many matches to occur"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#while-loop",
    "href": "notes/linux/bash_scripting.html#while-loop",
    "title": "Cheatsheet",
    "section": "While Loop",
    "text": "While Loop\n#!/bin/bash\n\necho ‚ÄúEnter number of times to display message:‚Äù\nread NUM\n\nCOUNT=1\n\n# -le means less than or equal to\nwhile [ $COUNT -le $NUM ]\ndo\n    echo ‚ÄúHello World $COUNT‚Äù\n    COUNT=‚Äú`expr $COUNT + 1`‚Äù\ndone"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#asynchronous-execution-with-wait",
    "href": "notes/linux/bash_scripting.html#asynchronous-execution-with-wait",
    "title": "Cheatsheet",
    "section": "Asynchronous Execution with wait",
    "text": "Asynchronous Execution with wait\n\nThis is the most straightforward implementation of async I have ever seen. You basically decide when to block and wait for a process that you previously decided to run in a child process."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#short-circuit-expressions",
    "href": "notes/linux/bash_scripting.html#short-circuit-expressions",
    "title": "Cheatsheet",
    "section": "Short Circuit Expressions",
    "text": "Short Circuit Expressions\n\n&&: command1 && command2:\nonly run command2 if command1 is successful\n\n\n||: command1 || command2:\nonly run command2 if command1 fails"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#reading-files",
    "href": "notes/linux/bash_scripting.html#reading-files",
    "title": "Cheatsheet",
    "section": "Reading Files",
    "text": "Reading Files\necho ‚ÄúEnter a filename‚Äù \nread FILE\n\nwhile read -r SUPERHERO; do\n    echo ‚ÄúSuperhero Name: $SUPERHERO‚Äù\ndone &lt; ‚Äú$FILE‚Äù"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#reading-files-with-loops",
    "href": "notes/linux/bash_scripting.html#reading-files-with-loops",
    "title": "Cheatsheet",
    "section": "Reading Files with loops",
    "text": "Reading Files with loops"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#file-descriptors",
    "href": "notes/linux/bash_scripting.html#file-descriptors",
    "title": "Cheatsheet",
    "section": "File Descriptors",
    "text": "File Descriptors\nUse a number &gt;= 3 for file descriptors.\n0 - stdin 1 - stdout 2 - stderr\n/dev/null -&gt; generic place where you can redirect streams into nothing.\n#!/bin/bash\n\necho ‚ÄúEnter file name: ‚Äú\nread FILE\n\n# &lt; means readonly,  &gt; means write only,  &lt;&gt; means allow read & write\n# assign file descriptor to filename\nexec 5&lt;&gt;$FILE\n\nwhile read -r SUPERHERO; do\n    echo ‚ÄúSuperhero Name: $SUPERHERO‚Äù\ndone &lt;&5 #use & to reference the file descriptor\n\n# append to end of file.\necho \"File Was Read On: `date`\" &gt;&5\n\n# close file descriptor\nexec 5&gt;&-"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#delimiters-ifs",
    "href": "notes/linux/bash_scripting.html#delimiters-ifs",
    "title": "Cheatsheet",
    "section": "Delimiters (IFS)",
    "text": "Delimiters (IFS)\nIFS - Internal Field Seperator Default is a space\n# this will return a space\necho $IFS\necho \"Enter filename to parse: \"\nread FILE # spacedelim.txt\n\n# https://stackoverflow.com/questions/24337385/bash-preserve-string-with-spaces-input-on-command-line\n\nwhile read -r CPU MEM DISK; do\n    echo \"CPU: $CPU\"\n    echo \"Memory: $MEM\"\n    echo \"Disk: $DISK\"\ndone &lt;\"$FILE\""
  },
  {
    "objectID": "notes/linux/bash_scripting.html#traps-and-signals",
    "href": "notes/linux/bash_scripting.html#traps-and-signals",
    "title": "Cheatsheet",
    "section": "Traps and Signals",
    "text": "Traps and Signals\nhttps://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html - cntrl+c = SIGINT - cntrl+z = SIGTSTP - kill command (without -9 flag) = SIGTERM - kill -9 = SIGKILL; this signal is not sent to the process, it is just killed.\nclear\n\n# first argument is what to exexute \ntrap 'echo \" - Please Press Q to Exit.\"' SIGINT SIGTERM SIGTSTP\n\n# cntrl+c = SIGINT\n# cntrl+z = SIGTSTP  (Suspend, send to background)\n\n\n\nwhile [ \"$CHOICE\" != \"Q\" ] && [ \"$CHOICE\" != \"q\" ]; do\n    echo \"Main Menu\"\n    echo \"=======\"\n    echo \"1) Choice One\"\n    echo \"2) Choice Two\"\n    echo \"3) Choice Three\"\n    echo \"Q) Quit\"\n    read CHOICE\n\n    clear\ndone"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#structure-of-functions-in-a-shell-script",
    "href": "notes/linux/bash_scripting.html#structure-of-functions-in-a-shell-script",
    "title": "Cheatsheet",
    "section": "structure of functions in a shell script",
    "text": "structure of functions in a shell script\nUnlike python, you must define your functions before you call them."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#scope",
    "href": "notes/linux/bash_scripting.html#scope",
    "title": "Cheatsheet",
    "section": "Scope",
    "text": "Scope\nsetting a variable within a function defines that variable globally after that function is called!!!\nGLOBALVAR=‚ÄúGlobally Visible‚Äù\n\n# sample function for function variable scope\nfuncExample () {\n    # local\n    LOCALVAR=‚ÄúLocally Visible‚Äù\n\n    echo ‚ÄúFrom within the function, the variable‚Äôs value is set to $LOCALVAR ‚Ä¶‚Äù\n}\n\n# script start\n\necho ‚Äúthis happens before the function call‚Äù\necho ‚Äú‚Äù\necho ‚ÄúLocal Variable = $LOCALVAR after the function call.‚Äù\necho ‚ÄúGlobal Variable = $GLOBALVAR (before the function call).‚Äù\n\nfuncExample\n\necho ‚Äúthis happens after the function call‚Äù\necho ‚ÄúLocal Variable = $LOCALVAR after the function call.‚Äù\necho ‚ÄúGlobal Variable = $GLOBALVAR (before the function call).‚Äù\nOutput of above code:\nÓÇ∞ ./scope.sh\nthis happens before the function call\n\nLocal Variable =  after the function call.\nGlobal Variable = Globally Visible (before the function call).\nFrom within the function, the variable‚Äôs value is set to Locally Visible ‚Ä¶\nthis happens after the function call\nLocal Variable = Locally Visible after the function call.\nGlobal Variable = Globally Visible (before the function call)."
  },
  {
    "objectID": "notes/linux/bash_scripting.html#functions-with-parameters",
    "href": "notes/linux/bash_scripting.html#functions-with-parameters",
    "title": "Cheatsheet",
    "section": "Functions With Parameters",
    "text": "Functions With Parameters\n# global\nUSERNAME=$1\n\nfuncAgeInDays () {\n    echo ‚ÄúHello $USERNAME, You are $1 Years old.‚Äù\n    echo ‚ÄúThat makes you approx `expr 365 \\* $1` days old‚Äù\n}\n\n#script - start\nread -r -p ‚ÄúEnter your age:‚Äù AGE\n\n# pass in arguments like this\nfuncAgeInDays $AGE"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#nested-functions",
    "href": "notes/linux/bash_scripting.html#nested-functions",
    "title": "Cheatsheet",
    "section": "Nested Functions",
    "text": "Nested Functions\nAuthor of course uses this for organization purposes. When you call a function if it has nested functions the functions defined within will be exposed to the script also.\n# global\nGENDER=$1\n\nfuncHuman () {\n    ARMS=2\n    LEGS=2\n\n    funcMale () {\n        BEARD=1\n        echo ‚ÄúThis man has $ARMS arms and $LEGS legs with $BEARD beard‚Äù\n    }\n\n    funcFemale () {\n        BEARD=0\n        echo ‚ÄúThis woman has $ARMS arms and $LEGS legs with $BEARD beard‚Äù\n    }\n}\n\n# script start\nclear\n\n# determine the actual gender and display the characteristics.\nif  [ ‚Äú$GENDER‚Äù == ‚Äúmale‚Äù ]; then\n    funcHuman\n    funcMale # this function is available after the parent function is called.\nelse\n    funcHuman\n    funcFemale\nfi"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#function-return-and-exit",
    "href": "notes/linux/bash_scripting.html#function-return-and-exit",
    "title": "Cheatsheet",
    "section": "Function Return and Exit",
    "text": "Function Return and Exit\nThis allows you to get arguments from the command line and then exit with a proper code and also use function returns inside scripts.\n# demo of return values and testing results\n\nYES=0\nNO=1\nFIRST=$1\nSECOND=$2\nTHIRD=$3\n\n# function definitions\n\nfuncCheckParams () {\n    # did we get three\n    # -z equivalent to isnull (in this case means not-null b/c of !)\n    if [ ! -z ‚Äú$THIRD‚Äù ]; then\n        echo ‚ÄúWe got three params‚Äù\n        return $YES\n    else\n        echo ‚ÄúWe did not get three params‚Äù\n        return $NO\n    fi\n}\n\n# script start\n\nfuncCheckParams\n# the return value from the function gets stored in $?\nRETURN_VALS=$?\n\nif [ ‚Äú$RETURN_VALS‚Äù -eq ‚Äú$YES‚Äù ]; then\n    echo ‚ÄúWe received three params and they are:‚Äù\n    echo ‚ÄúParam 1: $FIRST‚Äù\n    echo ‚ÄúParam 2: $SECOND‚Äù\n    echo ‚ÄúParam 3: $THIRD‚Äù\nelse\n    echo ‚ÄúUsage: funcreturn.sh [param1] [param2] [param3]‚Äù\n    exit 1\nfi"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#infobox",
    "href": "notes/linux/bash_scripting.html#infobox",
    "title": "Cheatsheet",
    "section": "Infobox",
    "text": "Infobox\nDissappears unless you sleep (see below). Does not come with any buttons.\n# globals\nINFOBOX=${INFOBOX=dialog}\nTITLE=‚ÄúDefault‚Äù\nMESSAGE=‚ÄúSomething to say‚Äù\nXCOORD=10\nYCOORD=20\n\nfuncDisplayInfoBox () {\n    $INFOBOX ‚Äîtitle ‚Äú$1‚Äù ‚Äîinfobox ‚Äú$2‚Äù ‚Äú$3‚Äù ‚Äú$4‚Äù\n    sleep ‚Äú$5‚Äù\n}"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#msgbox",
    "href": "notes/linux/bash_scripting.html#msgbox",
    "title": "Cheatsheet",
    "section": "Msgbox",
    "text": "Msgbox\nMsgbox - dissapears unless you sleep pass --msgbox argument, comes with default ok button and stays on screen.\n# global\nMSGBOX=${MSGBOX=dialog}\nTITLE=‚ÄúDefault‚Äù\nMESSAGE=‚ÄúSome Message‚Äù\nXCOORD=10\nYCOORD=20\n\nfuncDisplayMsgBox () {\n    $MSGBOX ‚Äîtitle ‚Äú$1‚Äù ‚Äîmsgbox ‚Äú$2‚Äù ‚Äú$3‚Äù ‚Äú$4‚Äù\n}"
  },
  {
    "objectID": "notes/linux/bash_scripting.html#menus",
    "href": "notes/linux/bash_scripting.html#menus",
    "title": "Cheatsheet",
    "section": "Menus",
    "text": "Menus\nSee pdf notes/scripts"
  },
  {
    "objectID": "notes/linux/cookbook.html",
    "href": "notes/linux/cookbook.html",
    "title": "Cookbook",
    "section": "",
    "text": "You should browse the table of contents of this book and use the shell scripts contained within off the shelf if possible.\n\nGitHub: https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/\nLink to book on GitHub: https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/blob/master/WickedCoolShellScripts2E.pdf\nBook: https://nostarch.com/wcss2"
  },
  {
    "objectID": "notes/linux/cookbook.html#shift-and-pop-args-off-and-count-args",
    "href": "notes/linux/cookbook.html#shift-and-pop-args-off-and-count-args",
    "title": "Cookbook",
    "section": "shift and $# pop args off and count args",
    "text": "shift and $# pop args off and count args\nshift.sh\n#!/bin/bash\nwhile (( $# )); do\n    echo \"process args: $1\"\n    shift\ndone\nResults in:\n$ ./shift.sh foo bar bash                                                                             \nprocess args: foo\nprocess args: bar\nprocess args: bash\n\nUsing shift for CLI options:\n#!/bin/bash\n# newquota--A frontend to quota that works with full-word flags a la GNU\n\n# quota has three possible flags, -g, -v, and -q, but this script\n#   allows them to be '--group', '--verbose', and '--quiet' too:\n\nflags=\"\"\nrealquota=\"$(which quota)\"\n\nwhile [ $# -gt 0 ]\ndo\n  case $1\n  in\n    --help)  echo \"Usage: $0 [--group --verbose --quiet -gvq]\" &gt;&2\n                       exit 1 ;;\n    --group )  flags=\"$flags -g\";       shift ;;\n    --verbose)  flags=\"$flags -v\";   shift ;;\n    --quiet)  flags=\"$flags -q\";       shift ;;\n    --)  shift;           break ;;\n    *)  break;          # done with 'while' loop!\n  esac\ndone\n\nexec $realquota $flags \"$@\""
  },
  {
    "objectID": "notes/linux/cookbook.html#collect-all-arguments",
    "href": "notes/linux/cookbook.html#collect-all-arguments",
    "title": "Cookbook",
    "section": "$* collect all arguments",
    "text": "$* collect all arguments\nshift2.sh\n#!/bin/bash\nfor var in $*; do\n    echo $var\ndone\nResults in:\n$ ./shift2.sh foo bar bash                                                                             \nprocess args: foo\nprocess args: bar\nprocess args: bash"
  },
  {
    "objectID": "notes/linux/cookbook.html#multi-option-case-statement",
    "href": "notes/linux/cookbook.html#multi-option-case-statement",
    "title": "Cookbook",
    "section": "Multi Option Case Statement",
    "text": "Multi Option Case Statement\nwhile read command args\ndo\n  case $command\n  in\n    quit|exit) exit 0                                  ;;\n    help|\\?)   show_help                               ;;\n    scale)     scale=$args                             ;;\n    *)         scriptbc -p $scale \"$command\" \"$args\"  ;;\n  esac\n\n  /bin/echo -n \"calc&gt; \"\ndone\n\nAnother example of case statement\n  case $1 in\n    1 ) month=\"Jan\"    ;;  2 ) month=\"Feb\"    ;;\n    3 ) month=\"Mar\"    ;;  4 ) month=\"Apr\"    ;;\n    5 ) month=\"May\"    ;;  6 ) month=\"Jun\"    ;;\n    7 ) month=\"Jul\"    ;;  8 ) month=\"Aug\"    ;;\n    9 ) month=\"Sep\"    ;;  10) month=\"Oct\"    ;;\n    11) month=\"Nov\"    ;;  12) month=\"Dec\"    ;;\n    * ) echo \"$0: Unknown numeric month value $1\" &gt;&2; exit 1\n  esac\n  return 0"
  },
  {
    "objectID": "notes/linux/cookbook.html#collecting-stdout-with--",
    "href": "notes/linux/cookbook.html#collecting-stdout-with--",
    "title": "Cookbook",
    "section": "Collecting stdout with -",
    "text": "Collecting stdout with -\necho \"Enter something: \" | cat -"
  },
  {
    "objectID": "notes/linux/cookbook.html#formatting-long-lines-fmt",
    "href": "notes/linux/cookbook.html#formatting-long-lines-fmt",
    "title": "Cookbook",
    "section": "Formatting Long Lines fmt",
    "text": "Formatting Long Lines fmt\nWill make lines no longer than 30 characters, not cutting off any words.\nfmt -w30 long_text.txt"
  },
  {
    "objectID": "notes/linux/cookbook.html#ifs---internal-field-seperator",
    "href": "notes/linux/cookbook.html#ifs---internal-field-seperator",
    "title": "Cookbook",
    "section": "IFS - Internal Field Seperator",
    "text": "IFS - Internal Field Seperator\nSets the internal delimiter\nifs_variable.sh\n#!/bin/bash\nIFS=\":\"\nvar='a:b-c~d'\nfor n in $var\ndo\n    echo \"$n\"\ndone\nResults in\n$ ./1/ifs_variable.sh\na\nb-c~d\n\nIFS in Great Expectations Action\nI‚Äôm using this in the Great Expectations Action to parse a list of arguments given as a string to an input\n# Loop through checkpoints\nSTATUS=0\nIFS=','\nfor c in $INPUT_CHECKPOINTS;do\n    echo \"\"\n    echo \"Validating Checkpoint: ${c}\"\n    if ! great_expectations checkpoint run $c; then\n        STATUS=1\n    fi\ndone\n\n\nIFS for iterating through $PATH\n#!/bin/bash\nIFS=\":\"\nfor directory in $PATH ; do\n   echo $directory\ndone\n\n\nIFS: Double vs.¬†Single Quotes\nWith double quotes the outcome of the command expansion would be fed as one parameter to the source command. Without quotes it would be broken up into multiple parameters, depending on the value of IFS which contains space, TAB and newline by default.\nvar=\"some value\"\n\n# $var fed into cmd as one parameter\ncmd \"$var\"\n\n# $var is fed into cmd as two parameters\n#  delimted by the default IFS character, space\ncmd '$var'"
  },
  {
    "objectID": "notes/linux/cookbook.html#random",
    "href": "notes/linux/cookbook.html#random",
    "title": "Cookbook",
    "section": "$RANDOM",
    "text": "$RANDOM\necho $RANDOM will print out a random number"
  },
  {
    "objectID": "notes/linux/cookbook.html#debugging-shell-scripts--x",
    "href": "notes/linux/cookbook.html#debugging-shell-scripts--x",
    "title": "Cookbook",
    "section": "Debugging Shell Scripts -x",
    "text": "Debugging Shell Scripts -x\nDebug a script:\nbash -x myscript.sh\nOR, within a script:\nset -x # start debugging\n./myscript.sh\nset +x # stop debugging\nAll variables will be substituted and lines that are run will be printed to screen, showing the control flow of the program"
  },
  {
    "objectID": "notes/linux/cookbook.html#sourcing-files-with-.",
    "href": "notes/linux/cookbook.html#sourcing-files-with-.",
    "title": "Cookbook",
    "section": "Sourcing files with .",
    "text": "Sourcing files with .\nSo you can ‚Äúimport‚Äù scripts\n. myscript.sh\n# is equivalent to\nsource myscript.sh"
  },
  {
    "objectID": "notes/linux/cookbook.html#using-functions-to-set-exit-codes",
    "href": "notes/linux/cookbook.html#using-functions-to-set-exit-codes",
    "title": "Cookbook",
    "section": "Using functions to set exit codes",
    "text": "Using functions to set exit codes\n\nvalidAlphaNum()\n{\n  # Validate arg: returns 0 if all upper+lower+digits, 1 otherwise.\n  # Remove all unacceptable chars.\n  validchars=\"$(echo $1 | sed -e 's/[^[:alnum:]]//g')\"\n\n  if [ \"$validchars\" = \"$1\" ] ; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nexit validAlphaNum"
  },
  {
    "objectID": "notes/linux/cookbook.html#know-if-someone-running-the-script-directly-with-bash_source",
    "href": "notes/linux/cookbook.html#know-if-someone-running-the-script-directly-with-bash_source",
    "title": "Cookbook",
    "section": "Know if someone running the script directly with $BASH_SOURCE",
    "text": "Know if someone running the script directly with $BASH_SOURCE\nThe variable $BASH_SOURCE can let you differentiate between when a script is run standalone vs when its invoked from another script:\nif [ \"$BASH_SOURCE\" = \"$0\" ]"
  },
  {
    "objectID": "notes/linux/cookbook.html#xargs",
    "href": "notes/linux/cookbook.html#xargs",
    "title": "Cookbook",
    "section": "xargs",
    "text": "xargs\nhttps://www.cyberciti.biz/faq/linux-unix-bsd-xargs-construct-argument-lists-utility/\n&gt; echo 1 2 3 4 | xargs -n2 -I {} echo hello {} world                                                                                                                                                                                                                                                   \nhello 1 2 world\nhello 3 4 world"
  },
  {
    "objectID": "notes/cuda.html",
    "href": "notes/cuda.html",
    "title": "CUDA Version Management",
    "section": "",
    "text": "There are many libraries that only support specific versions of CUDA. Downgrading/upgrading CUDA can sometimes be tricky (especially downgrading). It‚Äôs often desirable to manage CUDA versions per project (instead of globally), without having to reach for Docker."
  },
  {
    "objectID": "notes/cuda.html#problem",
    "href": "notes/cuda.html#problem",
    "title": "CUDA Version Management",
    "section": "",
    "text": "There are many libraries that only support specific versions of CUDA. Downgrading/upgrading CUDA can sometimes be tricky (especially downgrading). It‚Äôs often desirable to manage CUDA versions per project (instead of globally), without having to reach for Docker."
  },
  {
    "objectID": "notes/cuda.html#solution",
    "href": "notes/cuda.html#solution",
    "title": "CUDA Version Management",
    "section": "Solution",
    "text": "Solution\nYou can use conda to manage your CUDA versions! This allows you to isolate specific CUDA versions to specific environments rather than managing CUDA versions globally.\n\n\n\n\n\n\nNote\n\n\n\nI‚Äôm using mamba which has faster solvers than conda. Refer to the docs for installation instructions.\n\n\nLet‚Äôs say I want to downgrade to CUDA 11.7 in its own conda environment. First, I will create a new environment named cuda11-7 with the following command:\nmamba create -n cuda11-7 python=3.8\nmamba activate cuda11-7\nBefore I downgrade, we can check our CUDA version with the following command:\n&gt; nvcc --version\n\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:33:58_PDT_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\nAs you can see, I have CUDA version 11.8 but I want to downgrade to 11.7. We can downgrade CUDA by using cuda-toolkit:\nmamba install -c \"nvidia/label/cuda-11.7.1\" cuda-toolkit\nThis will take several minutes to complete. Next, recheck your CUDA version:\n&gt; nvcc --version\n\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Jun__8_16:49:14_PDT_2022\nCuda compilation tools, release 11.7, V11.7.99\nBuild cuda_11.7.r11.7/compiler.31442593_0\nNext, you need to install the correct version of PyTorch for your CUDA version. It is crucial to install the right version of PyTorch that matches your CUDA version exactly. For example, if you want to install PyTorch with CUDA 11.7, you can use the following command:\nmamba install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia\nYou can find PyTorch installation instructions on this page.\nViola! You have downgraded your CUDA version successfully. Note that this version of CUDA is isolated to this specific environment.\nTo make sure that everything is working correctly, make sure you can import torch and check the CUDA version from within Python:\n&gt; python -c \"import torch; print(torch.version.cuda)\"\n11.7"
  },
  {
    "objectID": "notes/cuda.html#additional-resources",
    "href": "notes/cuda.html#additional-resources",
    "title": "CUDA Version Management",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nWhy does nvcc --version sometimes report a different CUDA version than nvidia-smi? See this answer on Stack Overflow.\nTwitter discussion on this topic."
  },
  {
    "objectID": "notes/how-to-learn/index.html",
    "href": "notes/how-to-learn/index.html",
    "title": "How to learn",
    "section": "",
    "text": "I read the book Mindshift and it was unituitively so good that I decided to take this class. As a parent, I learned a bunch of things that I think will be beneficial to my children‚Äôs education.\nNotes from class Learning how to learn. These notes are for me and may not make sense for others."
  },
  {
    "objectID": "notes/how-to-learn/index.html#focused-vs-diffused-mode",
    "href": "notes/how-to-learn/index.html#focused-vs-diffused-mode",
    "title": "How to learn",
    "section": "Focused vs Diffused Mode",
    "text": "Focused vs Diffused Mode\nYou can not access focus and diffused mode simultaneously.\nPeople have tried to access diffuse mode of thinking by bringing themselves to the point of sleep and waking up just as they fall asleep. For example, Salvador Dali - holding keys in your hand, and let the sound of keys falling the ground wake you up.\nExercise, going for a walk good way to access diffuse thinking. You must take notes right away b/c diffuse thoughts may evaporate very fast."
  },
  {
    "objectID": "notes/how-to-learn/index.html#procrastination-memory-and-sleep",
    "href": "notes/how-to-learn/index.html#procrastination-memory-and-sleep",
    "title": "How to learn",
    "section": "Procrastination Memory and Sleep",
    "text": "Procrastination Memory and Sleep\nThey advocate the Pomodoro technique to combating procrastination. Its like HITT.\nPeriodic relaxation (every ~ 30 minutes) is important for accessing your diffuse mode. ‚ÄúIts important for the mortar to dry‚Äù.\nSpaced repetition (like Anki) is important for building memory. i\nGo over what you want to learn about right before you go to sleep, this will substantially improve the chances you will dream about it and form new connections about the subject.\nExercise can help create new neurons in your hippocampus (new neurons can be created there in adulthood) and help them survive longer."
  },
  {
    "objectID": "notes/how-to-learn/index.html#writing-tips-diffuse-mode",
    "href": "notes/how-to-learn/index.html#writing-tips-diffuse-mode",
    "title": "How to learn",
    "section": "Writing Tips Diffuse Mode",
    "text": "Writing Tips Diffuse Mode\nDiffuse mode is very important for writing. Editing is like focus mode and creating ideas is diffuse mode. Some rules of thumb: - Do not outline, make a mind map - Do not edit while you are writing (this is really hard to do -&gt; turn off monitor and just write).https://writeordie.com - app that forces you to stay in diffuse mode. You really cannot look at the screen. - Repeating again, do not look at screen while you are writing! Only when editing."
  },
  {
    "objectID": "notes/how-to-learn/index.html#chunking",
    "href": "notes/how-to-learn/index.html#chunking",
    "title": "How to learn",
    "section": "Chunking",
    "text": "Chunking\n‚ÄúTying your shoes‚Äù. Best chunks are subconscious. Spoken language is the best example of chunking. You have to practice to build chunks, you cannot just observe. You have to perform the task yourself.\nYou should scan a chapter before you read it: section headings, pictures, etc. This can help you build chunks."
  },
  {
    "objectID": "notes/how-to-learn/index.html#illusions-of-competence",
    "href": "notes/how-to-learn/index.html#illusions-of-competence",
    "title": "How to learn",
    "section": "Illusions of competence",
    "text": "Illusions of competence\nRight after you read something, look away and repeat to yourself what you recall. You can also draw a concept map. The recall process actually improves memory.\nRecall is better than re-reading. Re-reading is effective when you let time pass so you get spaced repetition. You need to test yourself to make sure you are competent. Recall is a form of testing.\nRecall outside your place of study to strengthen your memory. This is because you can get queues from where you are studying."
  },
  {
    "objectID": "notes/how-to-learn/index.html#deliberate-practice",
    "href": "notes/how-to-learn/index.html#deliberate-practice",
    "title": "How to learn",
    "section": "Deliberate Practice",
    "text": "Deliberate Practice\nFocus on the bits that you find difficult. Interleaving is important, meaning learning different subjects or even sections within one subject at once. Thomas S. Khun discovered that two types of people tend to make scientific breakthroughs: (1) young people (2) those who are trained in another discipline."
  },
  {
    "objectID": "notes/how-to-learn/index.html#procrastination-and-memory",
    "href": "notes/how-to-learn/index.html#procrastination-and-memory",
    "title": "How to learn",
    "section": "Procrastination and Memory",
    "text": "Procrastination and Memory\nYou have already learned about the Pomodoro technique. There are other techniques.\nFocus on the process, not the product. Don‚Äôt focus on completing the homework, focus on the process that leads you to complete the homework. Process is the small chunks of time to chip away at the task. This is the idea behind the Pomodoro. Your only goal is to finish the Pomodoro, for example."
  },
  {
    "objectID": "notes/how-to-learn/index.html#juggling-life-and-learning",
    "href": "notes/how-to-learn/index.html#juggling-life-and-learning",
    "title": "How to learn",
    "section": "Juggling Life and Learning",
    "text": "Juggling Life and Learning\nYou should make to-do list the night before for the next day and write it down. This will allow your subconscious to work on how it will conquer that task. Furthermore, writing it down will allow you to free it from working memory.\nPlan your quitting time is important."
  },
  {
    "objectID": "papers.html",
    "href": "papers.html",
    "title": "üìù Papers",
    "section": "",
    "text": "These are a list of papers I‚Äôve given:\n\nExplainable Artificial Intelligence of Multi-Level Stacking Ensemble for Detection of Alzheimer‚Äôs Disease Based on Particle Swarm Optimization and the Sub-Scores of Cognitive Biomarkers"
  },
  {
    "objectID": "publish.html",
    "href": "publish.html",
    "title": "üìö Books",
    "section": "",
    "text": "Still cooking ‚Ä¶"
  },
  {
    "objectID": "publish.html#still-under-review",
    "href": "publish.html#still-under-review",
    "title": "üìö Books",
    "section": "",
    "text": "Still cooking ‚Ä¶"
  },
  {
    "objectID": "notes/video_editing.html",
    "href": "notes/video_editing.html",
    "title": "Video Editing",
    "section": "",
    "text": "Youtube Tutorial: https://www.youtube.com/watch?v=yh77878QDVE His playlist: https://www.youtube.com/playlist?list=PLL6tMzF36ox2c‚ÄìSNKiifuP8kEFh80wPu\nCMD + B -&gt; ‚ÄúBlade‚Äù CMD + SHIFT + [ or ] to cut to location\n\n\n\nHere is a circular camera filter with OBS, which might be easier than DVR.\nYou can crop like this\n\n\n\nYou can add pause recording as a hotkey in OBS"
  },
  {
    "objectID": "notes/video_editing.html#davinci-resolve",
    "href": "notes/video_editing.html#davinci-resolve",
    "title": "Video Editing",
    "section": "",
    "text": "Youtube Tutorial: https://www.youtube.com/watch?v=yh77878QDVE His playlist: https://www.youtube.com/playlist?list=PLL6tMzF36ox2c‚ÄìSNKiifuP8kEFh80wPu\nCMD + B -&gt; ‚ÄúBlade‚Äù CMD + SHIFT + [ or ] to cut to location\n\n\n\nHere is a circular camera filter with OBS, which might be easier than DVR.\nYou can crop like this\n\n\n\nYou can add pause recording as a hotkey in OBS"
  },
  {
    "objectID": "notes/video_editing.html#other-tools-to-look-into",
    "href": "notes/video_editing.html#other-tools-to-look-into",
    "title": "Video Editing",
    "section": "Other tools to look into",
    "text": "Other tools to look into\n\nDescript\nRunwayML\ncapcut - from Rajeev\nAdobe Premiere\nFrame - Video collaboration that you use for Upwork etc\nEpidemic Sound - Sound by mood (Sanyam)\nCayla - Artlist\nCayla - Premium Beat\n\nCayla recommmends 1080p / 24 FPS for Youtube"
  },
  {
    "objectID": "blog/feed.html",
    "href": "blog/feed.html",
    "title": "Kareem‚Äôs Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\naxolotl start here\n\n\n\n\n\n\n\nLLMs\n\n\nfine-tuning\n\n\naxolotl\n\n\n\n\nBest practices for debugging axolotl with an example VSCode config.\n\n\n\n\n\n\nJan 11, 2024\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\nDokku: my favorite personal serverless platform\n\n\n\n\n\n\n\ninfra\n\n\nseverless\n\n\n\n\nLike Heroku, but you own it.\n\n\n\n\n\n\nJan 9, 2024\n\n\nHamel Husain\n\n\n\n\n\n\n  \n\n\n\n\nOn commercializing nbdev\n\n\n\n\n\n\n\nJupyter\n\n\nnbdev\n\n\n\n\nWhy I decided not to commercialize nbdev.\n\n\n\n\n\n\nMay 30, 2023\n\n\nHamel Husain\n\n\n\n\n\n\nNo matching items"
  }
]